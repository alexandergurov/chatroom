<?php
// $Id$

require_once dirname(__FILE__) . '/chatroom.forms.inc';
require_once dirname(__FILE__) . '/chatroom.theme.inc';

/**
 * @file
 * Enable chat room support in Drupal.
 */

/**
 * Implementation of hook_help().
 */
function chatroom_help($path, $arg) {
  switch ($path) {
    case 'admin/help#chatroom':
      return '<p />';
  }
}

/**
 * Implementation of hook_access().
 */
function chatroom_access($op, $node, $account) {
  $type = is_object($node) ? $node->type : $node;
  if ($type == 'chatroom') {
    if (user_access('administer chat rooms', $account)) {
      return TRUE;
    }
    if ($op == 'create') {
      return user_access('create chat rooms', $account);
    }
    if ($op == 'update' || $op == 'delete') {
      if (user_access('edit own chat rooms', $account) && ($account->uid == $node->uid)) {
        return TRUE;
      }
    }
  }
  else if ($type == 'chat') {
    if (user_access('administer chats', $account)) {
      return TRUE;
    }
    if ($op == 'create') {
      return user_access('create chats', $account);
    }
    if ($op == 'update' || $op == 'delete') {
      if (user_access('edit own chats', $account) && ($account->uid == $node->uid)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function chatroom_perm() {
  return array('access chat rooms', 'create chat rooms', 'edit own chat rooms', 'administer chats', 'administer chat rooms', 'create chats');
}

/**
 * Implementation of hook_menu().
 */
function chatroom_menu() {
  $items['admin/settings/chatroom'] = array(
    'title' => 'Chat room',
    'description' => t('Configure global settings for chat rooms and chats.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chatroom_admin_settings'),
    'access arguments' => array('administer chat rooms'),
  );
  $items['chatroom'] = array(
    'type' => MENU_SUGGESTED_ITEM,
    'title' => 'Chat rooms',
    'page callback' => 'chatroom_page',
    'access arguments' => array('access chat rooms'),
  );
  $items['chatroom/kicked'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'chatroom_chat_kicked_user',
    'page arguments' => array(2),
    'access arguments' => array('access chat rooms'),
  );
  $items['chatroom/chat/post/message/%node/%'] = array(
    'page callback' => 'chatroom_chat_post_message',
    'page arguments' => array(4, 5),
    'access arguments' => array('access chat rooms'),
    'type' => MENU_CALLBACK,
  );
  $items['chatroom/chat/get/latest/messages/%node/%'] = array(
    'page callback' => 'chatroom_chat_get_latest_messages',
    'page arguments' => array(5, 6),
    'access arguments' => array('access chat rooms'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function chatroom_node_info() {
  return array(
    'chatroom' => array(
      'name' => t('Chat room'),
      'module' => 'chatroom',
      'description' => t('A chat room provides access to chats and chat archives.'),
    ),
    'chat' => array(
      'name' => t('Chat'),
      'module' => 'chatroom_chat',
      'description' => t('A chat provides the chat interface.'),
    ),
  );
}

/**
 * Implementation of hook_insert().
 */
function chatroom_insert($node) {
  $result = db_query("
    INSERT INTO {chatroom}
      (nid, poll_freq, idle_freq, old_msg_count, kicked_out_message,
      banned_message)
    VALUES (%d, %d, %d, %d, '%s', '%s')
  ", array(
    $node->nid,
    1000 * $node->poll_freq,
    1000 * $node->idle_freq,
    $node->old_msg_count,
    $node->kicked_out_message,
    $node->banned_message,
  ));
  if ($result) {
    cache_clear_all(TRUE, 'cache_block');
  }
}

/**
 * Implementation of hook_update().
 */
function chatroom_update($node) {
  db_query("
    UPDATE {chatroom_chat}
    SET
      poll_freq = %d,
      idle_freq = %d,
      old_msg_count = %d,
      kicked_out_message = '%s',
      banned_message = '%s'
    WHERE nid = %d
  ", array(
    1000 * $node->poll_freq,
    1000 * $node->idle_freq,
    $node->old_msg_count,
    $node->kicked_out_message,
    $node->banned_message,
    $node->nid,
  ));
  // Archive all open chats when the node is updated?
  if (isset($node->chat_list)) {
    foreach ($node->chat_list as $chat_id) {
      if ($chat_id > 0) {
        chatroom_archive_chat($chat_id);
      }
    }
    cache_clear_all(TRUE, 'cache_block');
  }
  // Delete all archived chats when the node is updated?
  if (isset($node->closed_chat_list)) {
    foreach ($node->closed_chat_list as $chat_id) {
      if (!empty($chat_id)) {
        chatroom_chat_delete($chat_id);
      }
    }
  }
  // Unban users?
  if (isset($node->unban_list)) {
    db_query('DELETE FROM {chatroom_ban_list} WHERE crid = %d AND uid IN (%s)', $node->chatroom->crid, implode(',', $node->unban_list));
  }
}

/**
 * Implementation of hook_delete().
 */
function chatroom_delete(&$node) {
  db_query('DELETE FROM {chatroom} WHERE nid = %d', $node->nid);
  db_query("DELETE FROM {chatroom_chat} WHERE crid = %d", $node->nid);
  db_query('DELETE FROM {chatroom_ban_list} WHERE crid = %d', $node->nid);
  if (!empty($node->chats)) {
    $ccids = implode(',', array_keys($node->chats));
    db_query('DELETE FROM {chatroom_msg} WHERE ccid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_online_list} WHERE ccid IN (%s)', $ccids);
  }
  cache_clear_all(TRUE, 'cache_block');
}

/**
 * Implementation of hook_load().
 */
function chatroom_load($node) {
  // Load room information.
  $result = db_query('SELECT * FROM {chatroom} WHERE nid = %d', $node->nid);
  $chatroom = db_fetch_object($result);
  if (!empty($chatroom)) {
    unset($chatroom->nid);
    $chatroom->banned_users = chatroom_get_banned_users($node);
    // If the user is banned, don't load chats.
    if (chatroom_is_banned_user($node)) {
      return $chatroom;
    }
    // Load chats for current chatroom.
    $chatroom->chats = array();
    $cmids = array();
    $result = db_query("
      SELECT (SELECT COUNT(*) FROM {chatroom_msg} WHERE ccid = cc.ccid AND
        recipient = '') AS msg_count, MAX(cm.cmid) AS last_cmid, cc.ccid,
        cc.chatname, cc.when_archived
      FROM {chatroom} cr
      INNER JOIN {chatroom_chat} cc ON cc.crid = cr.nid
      LEFT JOIN {chatroom_msg} cm ON cm.ccid = cc.ccid AND cm.recipient = ''
      WHERE cr.nid = %d
      GROUP BY cc.ccid, cc.chatname, cc.when_archived
    ", $node->nid);
    while ($chat = db_fetch_object($result)) {
      if (isset($chat->when_archived)) {
        $chat->section = 'archives';
        $chat->msg_info = t('Archived on !date.', array('!date' => format_date($chat->when_archived, 'medium')));
      }
      else {
        $chat->section = 'chat';
        if ($chat->last_cmid) {
          $cmids[] = $chat->last_cmid;
        }
        else {
          $chat->msg_info = t('No messages');
        }
      }
      $chatroom->chats[$chat->ccid] = $chat;
    }
    // Load information about the last message in each chatroom.
    if (!empty($cmids)) {
      $result = db_query("
        SELECT cm.*, col.guest_id, u.name FROM {chatroom_msg} cm
        LEFT JOIN {chatroom_online_list} col ON col.sid = cm.sid
        LEFT JOIN {sessions} s ON s.sid = col.sid
        LEFT JOIN {users} u ON u.uid = s.uid
        WHERE cm.cmid IN (%s)
      ", implode(',', $cmids));
      while ($message = db_fetch_object($result)) {
        $chatroom->chats[$message->ccid]->msg_info = theme('chatroom_last_message', $message);
      }
    }
  }
  return $chatroom;
}

/**
 * Chatroom chat node hook functions.
 */
/**
 * Implementation of hook_insert().
 */
function chatroom_chat_insert($node) {
  $chat = array(
    'nid' => $node->nid,
    'crid' => isset($node->crid) ? $node->crid : 0,
    'poll_freq' => $node->poll_freq,
    'idle_freq' => $node->idle_freq,
    'kicked_out_message' => $node->kicked_out_message,
    'banned_message' => $node->banned_message,
    'module' => isset($node->module) ? $node->module : 'chatroom',
    'previous_messages_display_count' => $node->previous_messages_display_count,
    'popout' => $node->popout,
  );
  drupal_write_record('chatroom_chat', $chat);
}

/**
 * Implementation of hook_update().
 */
function chatroom_chat_update($node) {
}

/**
 * Implementation of hook_delete().
 */
function chatroom_chat_delete(&$node) {
  db_query('DELETE FROM {chatroom_chat} WHERE ccid = %d', $chat_id);
  db_query('DELETE FROM {chatroom_online_list} WHERE ccid = %d', $chat_id);
}

/**
 * Implementation of hook_load().
 */
function chatroom_chat_load($node) {
  $chat = new StdClass();
  if ($chat->chat = db_fetch_object(db_query("SELECT * FROM {chatroom_chat} WHERE nid = %d", $node->nid))) { 
    $chat->chat->users = chatroom_load_users($node);
    $chat->chat->chatroom = node_load($chat->chat->crid);
    $chat->chat->latest_msg_id = chatroom_chat_get_latest_message_id($node->nid);
    return $chat;
  }
}

/**
 * Get the latest message id for a given chat.
 * 
 * @param mixed $chat_id 
 */
function chatroom_chat_get_latest_message_id($chat_id) {
  return db_result(db_query("SELECT cmid FROM {chatroom_msg} WHERE ccid = %d ORDER BY cmid DESC LIMIT 1", $chat_id));
}

/**
 * Implementation of hook_view().
 */
function chatroom_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node);

  if ($page) {
    $bc = drupal_get_breadcrumb();
    if (!empty($bc)) {
      $bc[] = l('Chat rooms', 'chatroom');
      drupal_set_breadcrumb($bc);
    }
  }
  if (!$teaser) {
    // if the user is banned, just tell them why
    if (chatroom_is_banned_user($node)) {
      $node->content['body']['#value'] = !empty($node->banned_message) ? $node->banned_message : t('You have been banned from %chatroom.', array('%chatroom' => $node->title));
    }
    else {
      // if the user can create chats, show the form
      if (user_access('create chats')) {
        $node->content['add_chat'] = array(
          '#value' => drupal_get_form('chatroom_create_chat_form', $node),
          '#weight' => 1,
        );
      }
      // if there are some chats, build some tables to display them
      if (!empty($node->chats) && is_array($node->chats)) {
        foreach ($node->chats as $chat) {
          $type = $chat->section == 'chat' ? 'open' : 'archived';
          $rows[$type][] = array(
            array('data' => l($chat->chatname, "chatroom/chat/$chat->ccid")),
            array('data' => $chat->msg_count),
            array('data' => $chat->msg_info)
          );
        }
        if (!empty($rows['open'])) {
          $node->content['open_chats']['#weight'] = 2;
          $node->content['open_chats']['title'] = array(
            '#value' => '<h2>'. t('Open chats in this room') .'</h2>',
            '#weight' => 0,
          );
          $node->content['open_chats']['table'] = array(
            '#value' => theme('table', array(t('Chat name'), t('Message count'), t('Last message')), $rows['open']),
            '#weight' => 1,
          );
        }
        if (!empty($rows['archived'])) {
          $node->content['archived_chats']['#weight'] = 3;
          $node->content['archived_chats']['header'] = array(
            '#value' => '<h2>'. t('Archived chats in this room') .'</h2>',
            '#weight' => 0,
          );
          $node->content['archived_chats']['table'] = array(
            '#value' => theme('table', array(t('Chat name'), t('Message count'), t('When archived')), $rows['archived']),
            '#weight' => 1,
          );
        }
      }
    }
  }
  return $node;
}

/**
 * Implementation of hook_view().
 */
function chatroom_chat_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser && $page) {
    // Common features for any chat: CSS, breadcrumb, page title
    drupal_add_css(drupal_get_path('module', 'chatroom') .'/chatroom.css');
    $bc = drupal_get_breadcrumb();
    $bc[] = l($node->title, "node/$node->nid");
    drupal_set_breadcrumb($bc);
    drupal_set_title(check_plain($node->title));

    // Display a message if the user is banned.
    if (chatroom_is_banned_user($node)) {
      $content = theme('chatroom_chat_banned_user', $node);
    }
    elseif (!isset($chat->when_archived)) {
      chatroom_chat_register_user($node);
      chatroom_add_js($node);
      $content = theme('chatroom_chat', $node);

      if (user_access('administer chat rooms')) {
        $content .= drupal_get_form('chatroom_archive_chat_form', $node->nid);
        $content .= drupal_get_form('chatroom_delete_chat_form', $node->nid);
      }
    }
    else {
      $content = theme('chatroom_chat_archive', $chat);
      if (user_access('administer chat rooms')) {
        $content .= drupal_get_form('chatroom_delete_chat_form', $ccid);
        $content .= drupal_get_form('chatroom_unarchive_chat_form', $ccid);
      }
    }
  }
  else {
    $content = '<p>' . $node->body . '</p>';
  }
  $node->content['chatroom_chat_interface'] = array('#value' => $content);
  return $node; 
}

/**
 * Gets a list of banned users for a given chat room.
 */
function chatroom_get_banned_users($room) {
  $banned_users = array();
  $result = db_query("
    SELECT bl.uid, u.name FROM {chatroom_ban_list} bl
    INNER JOIN {users} u ON u.uid = bl.uid
    WHERE bl.nid = %d
  ", $room->nid);
  while ($user = db_fetch_object($result)) {
    $banned_users[$user->uid] = $user;
  }
  return $banned_users;
}

/**
 * Unarchive old chat.
 */
function chatroom_unarchive_chat($chat_id) {
  db_query('UPDATE {chatroom_chat} SET when_archived = NULL WHERE ccid = %d', $chat_id);
  $result = db_query('
    UPDATE {chatroom_msg} SET archived = 0 WHERE ccid = %d
  ', $chat_id);
  cache_clear_all(TRUE, 'cache_block');
  return $result;
}

/**
 * Archive a chat.
 */
function chatroom_archive_chat($chat_id) {
  db_query('UPDATE {chatroom_chat} SET when_archived = %d WHERE ccid = %d', time(), $chat_id);
  $result = db_query('
    UPDATE {chatroom_msg} SET archived = 1 WHERE ccid = %d
  ', $chat_id);
  cache_clear_all(TRUE, 'cache_block');
  return $result;
}

/**
 * Implementation of hook_block().
 */
function chatroom_block($op = 'list', $delta = 0, $edit = array()) {
  $types = array('chats', 'rooms', 'chat_users', 'site_users');

  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Chat room: active chats'),
        'cache' => BLOCK_CACHE_GLOBAL,
        'visibility' => 0,
        'pages' => 'chatroom',
      );
      $blocks[1] = array(
        'info' => t('Chat room: active chat rooms'),
        'cache' => BLOCK_CACHE_GLOBAL,
        'visibility' => 0,
        'pages' => 'chatroom',
      );
      $blocks[2] = array(
        'info' => t('Chat room: chat user list'),
        'cache' => BLOCK_CACHE_PER_PAGE,
        'visibility' => 1,
        'pages' => 'chatroom/chat/*',
      );
      $blocks[3] = array(
        'info' => t('Chat room: site-wide user list'),
        'cache' => BLOCK_CACHE_GLOBAL,
      );
      return $blocks;

    case 'configure':
      switch ($types[$delta]) {
        case 'chats':
          $items = t('chats');
          break;
        case 'chat_rooms':
          $items = t('chat rooms');
      }
      if (isset($items)) {
        $form["chatroom_block_{$types[$delta]}"] = array(
          '#type' => 'select',
          '#title' => t('Number of !items to display', array('!items' => $items)),
          '#default_value' => variable_get("chatroom_block_{$types[$delta]}", 5),
          '#options' => drupal_map_assoc(range(1, 15))
        );
        return $form;
      }
      break;

    case 'save':
      variable_set("chatroom_block_{$types[$delta]}", $edit["chatroom_block_{$types[$delta]}"]);
      break;

    case 'view':
      if (user_access('access chat rooms')) {
        switch ($types[$delta]) {
          case 'chat_users':
            return theme('chatroom_block_chat_users', chatroom_load_chat(arg(2)));

          default:
            return theme("chatroom_block_{$types[$delta]}");
        }
      }
  }
}

/**
 * Get a list of active chats.
 */
function chatroom_get_active_chats($start = NULL, $end = NULL, $save_query = TRUE) {
  global $user;
  $sql = "
    SELECT cc.*, nr.title AS room_name, cr.nid 
    FROM {chatroom_chat} cc
    INNER JOIN {chatroom} cr ON cr.nid = cc.crid
    INNER JOIN {node_revisions} nr ON nr.nid = cr.nid
    INNER JOIN {node} n ON n.nid = nr.nid
    WHERE cc.when_archived IS NULL
    ORDER BY cc.modified DESC
  ";
  if ($save_query) {
    $sql = db_rewrite_sql($sql);
    variable_set("chatroom_get_active_chats_query_{$user->uid}", $sql);
  }
  else {
    $sql = variable_get("chatroom_get_active_chats_query_{$user->uid}", $sql);
  }
  if (isset($start) && isset($end)) {
    $result = db_query_range($sql, $start, $end);
  }
  else {
    $result = db_query($sql);
  }
  $chats = array();
  while ($chat = db_fetch_object($result)) {
    $chats[] = $chat;
  }
  if (!empty($chats)) {
    return $chats;
  }
  return FALSE;
}

/**
 * Menu callback; a page listing all chat rooms.
 */
function chatroom_page() {
  foreach (chatroom_get_room_list(TRUE) as $room) {
    $tree[$room->nid] = node_load($room->nid);
  }
  return theme('chatroom_display', $tree);
}

/**
 * tells a kicked out user not to be a knob
 */
function chatroom_chat_kicked_user($chat_id = FALSE) {
  if ($chat = node_load($chat_id)) {
    if (isset($chat->when_archived)) {
      drupal_goto("chatrooms/chat/$chat_id", NULL, NULL, 301);
    }
    else {
      if (chatroom_is_banned_user($chat)) {
        $content = theme('chatroom_chat_banned_user', $chat);
      }
      else {
        $content = theme('chatroom_chat_kicked_user', $chat);
      }
      return $content;
    }
  }
  else {
    drupal_not_found();
  }
}

/**
 * Move old messages to archive.
 */
function chatroom_archive_old_msgs($chat_id) {
  db_query("UPDATE {chatroom_msg} set archived = 1 WHERE ccid = %d", $chat_id);
}

/**
 * Handles update or insert for user when loading a chat room.
 */
function chatroom_chat_register_user($chat) {
  global $user;
  $session_id = session_id();
  $exists = db_result(db_query("SELECT sid FROM {chatroom_chat_online_list} WHERE ccid = %d AND sid = '%s'", $chat->nid, $session_id));
  if ($exists) {
    db_query("
      UPDATE {chatroom_chat_online_list} 
      SET last_seen_time = %d
      WHERE ccid = %d AND sid = '%s' 
    ", time(), $chat->nid, $session_id);
  }
  else {
    db_query("
      INSERT INTO {chatroom_chat_online_list}
      (ccid, sid, last_seen_time)
      VALUES (%d, '%s', %d)
    ", $chat->nid, $session_id, time());
  }
}

/**
 * Add settings to chat page.
 */
function chatroom_add_js($node) {
  global $user;

  // Settings for chatroom.js. Variables which change during a chat session are
  // included in AHAH replies from chatroom_js(), and handled by code in
  // chatroom.js, so they are not duplicated here.
  $js = array(
    'pollInterval' => (int) isset($node->chat) ? $node->chat->poll_freq : 1,
    'idleInterval' => (int) $node->chat->idle_freq,
    'chatId'       => (int) $node->nid,
    'cacheDirectory' => variable_get('chatroom_cache_directory', '/tmp'), 
    'postMessagePath' => 'chatroom/chat/post/message',
  );
  // Timezones setting.
  if (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) {
    $js['timezone'] = $user->timezone;
  }
  else {
    $js['timezone'] = variable_get('date_default_timezone', 0);
  }
  if (isset($node->chat, $node->chat->latest_msg_id)) {
    $js['latestMsgId'] = $node->chat->latest_msg_id;
  }

  // Add scripts and settings.
  drupal_add_js(drupal_get_path('module', 'chatroom') . "/chatroom.js");
  drupal_add_js(array('chatroom' => $js), 'setting');
}

/**
 * Get messages for a given chat.
 *
 * @param $chat_id
 *   The chat id.
 * @param $last_cmid
 *   Only load messages with cmids greater than this value. If nonzero, then 
 *   $limit = FALSE is assumed. Default: 0 (load all messages).
 * @param $limit
 *   Limit the total number of messages to the old_msg_limit of the chatroom.
 *   Default: FALSE.
 * @return
 *   The highest cmid of if any messages were loaded; FALSE if no messages were
 *   loaded.
*/
function chatroom_chat_load_messages($chat_id, $last_cmid = 0, $limit = FALSE) {

  $query = '
    SELECT
      cm.*,
      u.name
    FROM {chatroom_msg} cm
    LEFT JOIN {chatroom_chat_online_list} col
      ON col.sid LIKE cm.sid AND col.ccid = cm.ccid
    LEFT JOIN {users} u ON u.uid = cm.uid
    WHERE cm.ccid = %d
    AND cm.cmid > %d
    ORDER BY cmid ASC
  ';
  $query_args = array($chat_id, $last_cmid);

  // Limit number of messages, e.g. on initial display of a chatroom.
  if ($last_cmid == 0 && $limit) {
    $query .= ' LIMIT %d';
    $query_args[] = $limit;
  }

  // Give third-party modules a chance to modify query.
  $result = db_query(db_rewrite_sql($query, 'cm', 'cmid', array('chatroom_msg' => TRUE)), $query_args);

  $messages = array();
  while ($message = db_fetch_object($result)) {
    file_put_contents('/home/justin/logs/chat.debug', "$last_cmid: " . print_r($message, TRUE), FILE_APPEND);
    $messages[] = $message;
  }
  return $messages;
}

/**
 * Load online users for the given chat.
 */
function chatroom_load_users($chat) {
  global $user;
  $sql = "
    SELECT
      s.uid,
      u.name
    FROM {chatroom_chat_online_list} col
    INNER JOIN {sessions} s ON s.sid = col.sid
    LEFT JOIN {users} u ON u.uid = s.uid
    WHERE col.ccid = %d
    ORDER BY u.name ASC
  ";
  $sql = db_rewrite_sql($sql, 'col', 'sid', array('chatroom_chat_online_list' => TRUE));
  $result = db_query($sql, $chat->nid);
  $users = array();
  while ($u = db_fetch_object($result)) {
    if (empty($u->uid)) {
      $u->name = variable_get('chatroom_guest_user_prefix', 'guest-');
    }
    if ($u->uid != $user->uid) {
      array_unshift($users, $u);
    }
    else {
      $users[] = $u;
    }
  }
  return $users;
}

/**
 * updates chat's cache file modified time
 */
function chatroom_chat_update_cache($cache_file, $latest_msg_id) {
  @file_put_contents($cache_file, "$latest_msg_id\n");
}

/**
 * gets a list of online users, not including the current user
 */
function chatroom_get_site_online_list($uid) {
  $users = array();
  $result = db_query("SELECT uid, name FROM {users} WHERE access >= %d AND uid <> 0", time() - variable_get('session_write_interval', 180));
  while ($user = db_fetch_object($result)) {
    if ($uid != $user->uid) {
      $users[] = $user;
    }
  }
  return $users;
}

/**
 * Check if the current user is banned from the chat room.
 */
function chatroom_is_banned_user($room) {
  global $user;
  // If the node is already loaded, check the ban list. Otherwise, query the
  // database.
  if (isset($room->banned_list) && is_array($room->banned_list)) {
    return in_array($user->uid, array_keys($room->banned_list));
  }
  else {
    return db_result(db_query("SELECT nid FROM {chatroom_ban_list} WHERE nid = %d AND uid = %d", $room->nid, $user->uid));
  }
}

/**
 * returns the list of available chat rooms
 */
function chatroom_get_room_list($archived = FALSE, $start = NULL, $end = NULL) {
  $sql = '
    SELECT
      cr.nid,
      n.title,
      COUNT(cc.ccid) AS chat_count
    FROM {chatroom} cr
    INNER JOIN {node} n ON n.nid = cr.nid
    INNER JOIN {node_revisions} nr ON nr.nid = n.nid
    LEFT JOIN {chatroom_chat} cc ON cc.crid = cr.nid
  ';
  $sql .= $archived ? '' : ' WHERE cc.when_archived IS NULL';
  $sql .= ' GROUP BY cr.nid, n.title, n.sticky, nr.timestamp ORDER BY n.sticky DESC, nr.timestamp DESC';
  if (isset($start) && !empty($end)) {
    $result = db_query_range($sql, $start, $end);
  }
  else {
    $result = db_query($sql);
  }
  $rooms = array();
  while ($room = db_fetch_object($result)) {
    $rooms[] = $room;
  }
  return $rooms;
}

/**
 * Get a list of online users in a given chat.
 *
 * The current user is at the top of the returned list. Users who do not update
 * within five seconds after the last message is sent are dropped from the
 * online list.
 */
function _chatroom_get_online_list($chat) {
  $users = array();
  // No users in an archived chat.
  if ($chat = chatroom_load_chat($ccid) && !isset($chat->when_archived)) {
    $result = db_query("
      SELECT
        col.sid, 
        col.away,
        cc.chatname,
        u.uid, 
        u.name
      FROM {chatroom_online_list} col
      INNER JOIN {chatroom_chat} cc ON cc.ccid = col.ccid
      INNER JOIN {sessions} s ON s.sid = col.sid
      LEFT JOIN {users} u ON u.uid = s.uid
      WHERE col.ccid = %d AND col.modified > cc.modified
    ", $chat->ccid);
    while ($chat_user = db_fetch_object($result)) {
      // Format the user or guest name.
      if (empty($chat_user->name)) {
        $chat_user->name = variable_get('chatroom_guest_user_prefix', 'guest-');
      }
      else {
        $chat_user->name = check_plain($user->name);
      }
      // Store the current user separately.
      if ($chat_user->sid == session_id()) {
        $current_user = $chat_user;
      }
      else {
        $users[] = $chat_user;
      }
    }
    // Add the current user at the head of the list.
    if (isset($current_user)) {
      array_unshift($users, $current_user);
    }
  }
  return $users;
}

/**
 * Get the latest messages for a chat, and send back to the client.
 */
function chatroom_chat_get_latest_messages($node, $last_msg_id) {
  global $user;
  
  if ($node->chat->when_archived) {
    $response['archived'] = $node->chat->when_archived;
    drupal_set_message(t('This chat has been archived.'));
  }
  else {
    $response['messages'] = array();
    foreach (chatroom_chat_load_messages($node->nid, $last_msg_id) as $message) {
      $msg = new StdClass();
      $msg->html = theme('chatroom_message', $message);
      $msg->cmid = $message->cmid;
      $response['messages'][] = $msg;
    }
    $response['usersHtml'] = theme('chatroom_user_list', $node->chat->users);
  }
  print drupal_to_js(array('data' => $response));
}

/**
 * Posted messages are handled here.
 * 
 * @return void
 */
function chatroom_chat_post_message($node, $last_msg_id) {
  global $user;

  // Check we have a message posted.
  if (!isset($_POST['message'])) {
    exit;
  }
  
  // Write the message to the chat.
  $message = array(
    'ccid' => $node->chat->nid, 
    'uid' => $user->uid, 
    'msg' => $_POST['message'],
    'sid' => session_id(), 
    'type' => chatroom_chat_get_message_type($_POST['message']),
    'recipient_uid' => isset($_POST['recipient_uid']) ? $_POST['recipient_uid'] : 0, 
  );
  if ($msg_id = chatroom_chat_save_message($message, $node)) {
    chatroom_chat_get_latest_messages($node, $msg_id - 1);
  }
}

/**
 * Write a message into a chat, and allow any interested modules to react.
 *
 * @param array $message 
 * @param StdClass $node 
 * @return boolean
 */
function chatroom_chat_save_message($message, $node) {
  drupal_alter('chatroom_chat_msg', $message);
  if (drupal_write_record('chatroom_msg', $message)) {
    $node->chat->latest_msg_id = $message['cmid'];
    if ($message['type'] == 'command') {
      chatroom_chat_call_command($message, $node);
    }
    else {
      module_invoke_all('chat_msg_saved', $message, $node);
    }
    return $message['cmid'];
  }
  return FALSE;
}

/**
 * Try to invoke a command.
 * 
 * @param mixed $message 
 * @param mixed $node 
 */
function chatroom_chat_call_command($message, $node) {
  $commands = module_invoke_all('chat_commands');
  list($command, $args) = chatroom_chat_parse_command($message['message']);
  if (isset($commands[$command])) {
    call_user_func_array($callback, array($command, $args, $node));
  }
  module_invoke_all('chat_command_' . $command, $args, $node);
}

/**
 * Parse out the command name and any arguments from a chat message.
 * 
 * @param mixed $message 
 * @return array
 */
function chatroom_chat_parse_command($message) {
  $command = FALSE;
  $args = array();
  $command_regex = variable_get('chatroom_chat_command_prefix', '/') . '([^a-z_-0-9]+)(.*)';
  if (preg_match("#^$command_regex$#", $message, $matches)) {
    $command = $matches[1];
    if (isset($matches[2])) {
      $args = explode($matches[2]);
    }
  }
  return array($command, $args);
}

/**
 * Figure out what sort of message this is.
 * 
 * @param mixed $message 
 * @return void
 */
function chatroom_chat_get_message_type($message) {
  if (preg_match('#^' . variable_get('chatroom_chat_command_prefix', '/') . '#', $message)) {
    return 'command';
  }
  return 'message';
}

