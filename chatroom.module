<?php
// $Id$

/**
 * @file
 * Enable chat room support in Drupal.
 */

/**
 * Implementation of hook_help().
 */
function chatroom_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables chat rooms in Drupal.');
    case 'node/add#chatroom':
      return t('If you want to add a chat room.');
  }
}

/**
 * Implementation of hook_access().
 */
function chatroom_access($op, $node) {
  global $user;
  if ($op == 'create') {
    return user_access('create chat rooms');
  }
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own chat rooms') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function chatroom_perm() {
  return array('access chat rooms', 'create chat rooms', 'edit own chat rooms', 'administer chats', 'administer chat rooms', 'create chats');
}

/**
 * Implementation of hook_menu().
 */
function chatroom_menu($may_cache) {
  $items = array();
  $items[] = array(
    'path' => 'admin/settings/chatroom',
    'callback' => 'drupal_get_form',
    'callback arguments' => array('chatroom_admin_settings'),
    'title' => t('Chat room'),
    'description' => t('Configure chat rooms.'),
    'access' => user_access('administer chat rooms')
  );
  $items[] = array(
    'path' => 'chatrooms',
    'callback' => 'chatroom_page',
    'access' => user_access('access chat rooms'),
    'title' => t('Chat rooms'),
    'type' => MENU_SUGGESTED_ITEM
  );
  $items[] = array(
    'path' => 'chatrooms/kicked/user',
    'callback' => 'chatroom_chat_kicked_user',
    'access' => user_access('access chat rooms'),
    'type' => MENU_CALLBACK
  );
  $items[] = array(
    'path' => 'chatrooms/chat',
    'callback' => 'chatroom_chat',
    'access' => user_access('access chat rooms'),
    'type' => MENU_CALLBACK
  );
  $items[] = array(
    'path' => 'chatrooms/archives',
    'callback' => 'chatroom_chat_archive',
    'access' => user_access('access chat rooms'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Menu callback; display site-wide chat room settings.
 */
function chatroom_admin_settings() {
  $form['chatroom_list_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Chat room submission information title'),
    '#default_value' => variable_get('chatroom_list_description', ''),
    '#rows' => 3,
    '#description' => t('This text will appear above the list of chat rooms for your site.'),
  );
  $form['chatroom_auto_archive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically archive old messages.'),
    '#description' => t('If there are a lot of old messages, archiving will improve chat performance.'),
    '#default_value' => variable_get('chatroom_auto_archive', FALSE),
  );
  if (chatroom_smileys_supported()) {
    $form['chatroom_smileys_support'] = array(
     '#type' => 'fieldset',
     '#title' => t('Smileys module support'),
    );
    $form['chatroom_smileys_support']['chatroom_smileys_enabled'] = array(
     '#type' => 'checkbox',
     '#title' => t('enable smileys module support'),
     '#default_value' => variable_get('chatroom_smileys_enabled', 0),
    );
    $form['chatroom_smileys_support']['chatroom_smileys_showtextentry'] = array(
     '#type' => 'checkbox',
     '#title' => t('show smileys in entry boxes'),
     '#default_value' => variable_get('chatroom_smileys_showtextentry', 0),
     '#disabled' => TRUE,
    );
    if (variable_get('chatroom_smileys_enabled', 0)) {
      $form['chatroom_smileys_support']['chatroom_smileys_showtextentry']['#disabled'] = FALSE;
    }
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_node_info().
 */
function chatroom_node_info() {
  return array(
    'chatroom' => array(
      'name' => t('Chat room'),
      'module' => 'chatroom',
      'description' => t('A chat room provides access to chats and chat archives.'),
    ),
  );
}

/**
 * Implementation of hook_form().
 */
function chatroom_form(&$node) {
  global $user;
  $old_msg_range = array();
  for ($i = 1; $i <= 25; $i++) {
    $old_msg_range[$i] = $i * 10;
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => check_plain($node->title),
    '#required' => TRUE
  );
  $form['chatroom']['idle_freq'] = array(
    '#type' => 'select',
    '#title' => t('Chat room idle time, in seconds'),
    '#default_value' => $node->chatroom->idle_freq / 1000,
    '#options' => drupal_map_assoc(array(20, 40, 60, 80, 100, 120, 140, 160, 180)),
    '#description' => t('How many seconds between each message before a last message time is written in the chat.'),
  );
  $form['chatroom']['poll_freq'] = array(
    '#type' => 'select',
    '#title' => t('Chat room update frequency, in seconds'),
    '#default_value' => $node->chatroom->poll_freq / 1000,
    '#options' => drupal_map_assoc(range(1,10)),
    '#description' => t('How many seconds between each request for updates to the server.'),
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => filter_xss($node->body),
    '#rows' => 3,
    '#weight' => -20,
    '#description' => t('Describe your chat room so other people will know if they want to join.'),
  );
  $form['chatroom']['old_msg_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of old messages to show when entering a chat'),
    '#default_value' => $node->chatroom->old_msg_count,
    '#options' => drupal_map_assoc($old_msg_range),
  );
  $form['chatroom']['kicked_out_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Chat room kicked out message'),
    '#default_value' => filter_xss($node->chatroom->kicked_out_msg),
    '#rows' => 3,
    '#description' => t('This text will appear on the page kicked out users are sent to.'),
  );
  $form['chatroom']['banned_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Chat room banned message'),
    '#default_value' => filter_xss($node->chatroom->banned_msg),
    '#rows' => 3,
    '#description' => t('This text will appear on the page banned users are sent to.'),
  );
  if (count($node->chatroom->banned_users)) {
    foreach ($node->chatroom->banned_users as $banned_user) {
      $banned_users[$banned_user->uid] = check_plain($banned_user->name);
    }
    $form['chatroom_banned_users'] = array(
      '#type' => 'fieldset',
      '#title' => t('Manage banned users'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['chatroom_banned_users']['unban_list'] = array(
      '#type' => 'checkboxes',
      '#options' => $banned_users,
      '#description' => t('Check the users you would like to unban')
    );
  }
  if (count($node->chatroom->chats)) {
    foreach ($node->chatroom->chats as $chat) {
      if ($chat->section != 'archives') {
        $chats[$chat->ccid] = check_plain($chat->chatname);
      }
    }
    $form['chatroom_chats'] = array(
      '#type' => 'fieldset',
      '#title' => t('Manage open chats'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['chatroom_chats']['chat_list'] = array(
      '#type' => 'checkboxes',
      '#options' => $chats,
      '#description' => t('Check the chats you would like to close')
    );
  }
  $form['body_filter']['format'] = filter_form($node->format);
  return $form;
}

/**
 * Implementation of hook_insert()
 */
function chatroom_insert($node) {
  $result = db_query("INSERT INTO {chatroom}
                      (nid, poll_freq, idle_freq, old_msg_count, kicked_out_message, banned_message, modified)
                      VALUES (%d, %d, %d, %d, '%s', '%s', %d)",
                     $node->nid, 1000 * $node->poll_freq, 1000 * $node->idle_freq, $node->old_msg_count,
                     $node->kicked_out_message, $node->banned_message, time());
  if ($result) {
    chatroom_block_update_cache('chatrooms');
  }
}

/**
 * Implementation of hook_update()
 */
function chatroom_update($node) {
  db_query("UPDATE {chatroom}
            SET poll_freq = %d, idle_freq = %d, old_msg_count = %d,
              kicked_out_message = '%s', banned_message = '%s', modified = %d
            WHERE nid = %d",
            1000 * $node->poll_freq, 1000 * $node->idle_freq, $node->old_msg_count,
            $node->kicked_out_message, $node->banned_message, $node->nid, time());
  if (isset($node->chat_list)) {
    foreach ($node->chat_list as $chat_id) {
      if ($chat_id > 0) {
        chatroom_archive_chat($chat_id);
      }
    }
  }
  if (isset($node->unban_list)) {
    db_query('DELETE FROM {chatroom_ban_list}
              WHERE crid = %d
              AND uid IN ('. implode(',', $node->unban_list) .')',
              $node->chatroom->crid);
  }
}

/**
 * Implementation of hook_delete().
 */
function chatroom_delete(&$node) {
  db_query('DELETE FROM {chatroom} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {chatroom_ban_list} WHERE crid = %d', $node->chatroom->crid);
  if (isset($node->chatroom) && count($node->chatroom->chats)) {
    $ccids = implode(',', array_keys($node->chatroom->chats));
    db_query('DELETE FROM {chatroom_chat} WHERE crid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_msg} WHERE ccid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_online_list} WHERE ccid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_msg_archive} WHERE ccid IN (%s)', $ccids);
  }
  chatroom_block_update_cache('chatrooms');
}

/**
 * Implementation of hook_load().
 */
function chatroom_load($node) {
  $c['chatroom'] = db_fetch_object(db_query('SELECT * FROM {chatroom} WHERE nid = %d', $node->nid));

  // if the user is banned, just return, don't load the rest of the chat room info
  if (chatroom_is_banned_user($c['chatroom']->crid)) {
    return $c;
  }

  if ($c['chatroom']) {
    // get any chats
    $c['chatroom']->chats = chatroom_get_room_summary($c['chatroom']->crid);

    // get any banned users
    $c['chatroom']->banned_users = chatroom_get_banned_users($c['chatroom']->crid);
  }
  return $c;
}

/**
 * returns a the list of chats for a given room
 *
 * patch applied to fix archived msg count from here:
 * http://drupal.org/node/70771
 * thanks jun :-)
 *
 */
function chatroom_get_room_summary($room_id) {
  $result = db_query("SELECT     GREATEST(COUNT(cm.cmid), COUNT(cma.cmid)) AS msg_count,
                                 MAX(cm.cmid) AS last_cmid,
                                 cc.ccid,
                                 cc.chatname,
                                 cc.when_archived
                      FROM       {chatroom} AS cr
                      INNER JOIN {chatroom_chat} AS cc
                      ON         cc.crid = cr.crid
                      LEFT JOIN  {chatroom_msg} AS cm
                      ON         cm.ccid = cc.ccid
                      LEFT JOIN  {chatroom_msg_archive} AS cma
                      ON         cma.ccid = cc.ccid
                      WHERE      cr.crid =  %d
                      AND        (cm.recipient = 0 OR cm.recipient IS NULL)
                      GROUP BY   cc.ccid, cc.chatname, cc.when_archived",
                      $room_id);
  $chats = array();
  $msg_ids = array();
  while ($chat = db_fetch_object($result)) {
    if ($chat->when_archived) {
      $chat->section = 'archives';
      $chat->msg_info = t('This chat was archived on !date.', array('!date' => format_date($chat->when_archived, 'medium')));
    }
    else {
      $chat->section = 'chat';
      if ($chat->last_cmid) {
        $msg_ids[] = $chat->last_cmid;
      }
      else {
        $chat->msg_info = t('No messages');
      }
    }
    $chats[$chat->ccid] = $chat;
  }
  if (count($msg_ids)) {
    $result = db_query('SELECT    cm.*,
                                  u.name
                        FROM      {chatroom_msg} AS cm
                        LEFT JOIN {users} AS u
                        ON        u.uid = cm.uid
                        WHERE     cmid IN (%s)',
                        implode(',', $msg_ids));
    while ($msg = db_fetch_object($result)) {
      foreach ($chats as $i => $chat) {
        if ($chat->last_cmid == $msg->cmid) {
          $chats[$i]->msg_info = chatroom_get_msg_info($msg);
        }
      }
    }
  }
  return $chats;
}

/**
 * format a msg for display in a summary table
 */
function chatroom_get_msg_info($msg) {
  $user = $msg->uid ? l(check_plain($msg->name), "user/$msg->uid") : t('Anonymous');
  return check_plain($msg->msg) ."<br />Posted by <b>$user</b>, ". format_date($msg->modified, 'medium');
}

/**
 * Gets a list of banned users for a given chat room.
 */
function chatroom_get_banned_users($crid) {
  $sql = 'SELECT     cbl.uid,
                     u.name
          FROM       {chatroom_ban_list} AS cbl
          INNER JOIN {users} AS u
          ON         u.uid = cbl.uid
          WHERE      cbl.crid = %d';
  $banned_users = array();
  if ($result = db_query($sql, $crid)) {
    if ($banned_user = db_fetch_object($result)) {
      $banned_users[] = $banned_user;
    }
  }
  return $banned_users;
}

/**
 * Implementation of hook_view().
 */
function chatroom_view($node) {
  $node = node_prepare($node);
  $bc = drupal_get_breadcrumb();
  if (count($bc)) {
    $bc[] = l('Chat rooms', 'chatrooms/');
    drupal_set_breadcrumb($bc);
  }

  // if the user is banned, just tell them why
  if (chatroom_is_banned_user($node->chatroom->crid)) {
    $node->content['body']['#value'] = $node->chatroom->banned_message ? $node->chatroom->banned_message : t('You have been banned from this chat room.');
    return;
  }

  // if the user can create chats, show the form
  if (user_access('create chats')) {
    $node->content['add_chat'] = array(
      '#value' => drupal_get_form('chatroom_create_chat_form', $node->chatroom->crid),
      '#weight' => 1,
    );
  }

  // if there are some chats, build some tables to display them
  if (count($node->chatroom->chats) > 0) {
    foreach ($node->chatroom->chats as $chat) {
      $type = $chat->section == 'chat' ? 'open' : 'archived';
      $rows[$type][] = array(
        array('data' => l(check_plain($chat->chatname), "chatrooms/$chat->section/$chat->ccid")),
        array('data' => $chat->msg_count),
        array('data' => $chat->msg_info)
      );
    }
    if (count($rows['open'])) {
      $node->content['open_chats']['#weight'] = 2;
      $node->content['open_chats']['title'] = array(
        '#value' => '<h2>'. t('Open chats in this room') .'</h2>',
        '#weight' => 0,
      );
      $node->content['open_chats']['table'] = array(
        '#value' => theme('table', array(t('Chat name'), t('Message count'), t('Last message')), $rows['open']),
        '#weight' => 1,
      );
    }
    if (count($rows['archived'])) {
      $node->content['archived_chats']['#weight'] = 3;
      $node->content['archived_chats']['header'] = array(
        '#value' => '<h2>'. t('Archived chats in this room') .'</h2>',
        '#weight' => 0,
      );
      $node->content['archived_chats']['table'] = array(
        '#value' => theme('table', array(t('Chat name'), t('Message count'), t('When archived')), $rows['archived']),
        '#weight' => 1,
      );
    }
  }
  return $node;
}

/**
 * returns a create chat form
 */
function chatroom_create_chat_form($room_id) {
  $form['chatroom_create_chat'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create a new chat'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['chatroom_create_chat']['chat_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Chat name'),
    '#size' => 30,
    '#required' => TRUE,
    '#description' => t('Enter the name for the chat'),
  );
  $form['chatroom_create_chat']['room_id'] = array(
    '#type' => 'hidden',
    '#value' => $room_id
  );
  $form['chatroom_create_chat']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create chat')
  );
  return $form;
}

/**
 * validates attempt to create chat - checks this name is not already in use
 */
function chatroom_create_chat_form_validate($f_id, $f_values) {
  $crid = $f_values['room_id'];
  $name = $f_values['chat_name'];
  $sql = "SELECT ccid FROM {chatroom_chat} WHERE crid = %d AND chatname = '%s' AND when_archived IS NULL";
  if (db_num_rows(db_query($sql, $crid, $name))) {
    form_set_error('chatroom_chat_name', t('A chat called %name already exists.', array('%name' => $name)));
  }
}

/**
 * creates a chat
 */
function chatroom_create_chat_form_submit($f_id, $f_values) {
  global $user;
  $created = db_query("INSERT INTO {chatroom_chat} (crid, uid, chatname, modified)
                       VALUES (%d, %d, '%s', %d)",
                      $f_values['room_id'], $user->uid, $f_values['chat_name'], time());
  if (!$created) {
    drupal_set_message(t("There was an error creating your chat"), 'error');
  }
  else {
    chatroom_block_update_cache('chats');
  }
}

/**
 * Archive old chat.
 */
function chatroom_archive_chat($chat_id) {
  db_query('UPDATE {chatroom_chat}
            SET when_archived = %d
            WHERE ccid = %d', time(), $chat_id);
  $result = db_query('INSERT INTO {chatroom_msg_archive}
                      (cmid, ccid, uid, msg_type, msg, session_id, recipient, modified)
                          SELECT *
                          FROM   {chatroom_msg}
                          WHERE  ccid = %d', $chat_id);
  if ($result) {
    db_query('DELETE FROM {chatroom_msg} WHERE ccid = %d', $chat_id);
  }
  else {
    db_query('UPDATE {chatroom_chat}
              SET when_archived = NULL
              WHERE ccid = %d', $chat_id);
  }
  chatroom_block_update_cache('chats');
  return $result;
}

/**
 * Implementation of hook_block().
 */
function chatroom_block($op = 'list', $delta = 0, $edit = array()) {
  $types = array(
    array('chats', t('Active chats')),
    array('chat_rooms', t('Active chat rooms')),
    array('online_chat_users', t('Chat online list')),
    array('online_site_users', t('Site-wide online list')),
    array('command_list', t('Chat commands')),
  );
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = $types[0][1];
      $blocks[1]['info'] = $types[1][1];
      $blocks[2]['info'] = $types[2][1];
      $blocks[3]['info'] = $types[3][1];
      $blocks[4]['info'] = $types[4][1];
      return $blocks;
    case 'configure':
      $form["chatroom_block_{$types[$delta][0]}"] = array(
        '#type' => 'select',
        '#title' => t('Number of !types to display', array('!type' => $types[$delta][1])),
        '#default_value' => variable_get("chatroom_block_{$types[$delta][0]}", '5'),
        '#options' => drupal_map_assoc(range(1, 15))
      );
      return $form;
    case 'save':
      variable_set("chatroom_block_{$types[$delta][0]}", $edit["chatroom_block_{$types[$delta][0]}"]);
      break;
    case 'view':
      /**
       * Hack to set up cache files - can't find a way to do this on
       * enable/disable of chat room blocks.
       */
      if ($types[$delta][0] != 'online_chat_users' && !@file_exists(chatroom_block_get_cache_file($types[$delta][0]))) {
        chatroom_block_update_cache($types[$delta][0]);
      }
      if (user_access('access chat rooms')) {
        if ($types[$delta][0] == 'command_list') {
          list($content, $block['subject']) = chatroom_block_commands();
          if ($content != false) {
            $block['content'] = $content;
            return $block;
          }
        }
        switch ($types[$delta][0]) {
          case 'chats':
            $content = chatroom_block_chats();
            $block['subject'] = $content ? $types[$delta][1] : false;
            break;
          case 'chat_rooms':
            $content = chatroom_block_rooms();
            $block['subject'] = $content ? $types[$delta][1] : false;
            break;
          case 'online_chat_users':
            list($content, $block['subject']) = chatroom_block_chat_online_list();
            break;
          case 'online_site_users':
            list($content, $block['subject']) = chatroom_block_site_online_list();
            break;
        }
        if ($content) {
          chatroom_block_add_state_js();
        }
        $block['content'] = $content;
        return $block;
      }
  }
}

/**
 * List chat commands.
 */
function chatroom_block_commands() {
  if (!preg_match('/^chatrooms\/chat\/(\d+)/', $_GET['q'], $matches)) {
    return array(false, false);
  }
  $content = '/msg <em>'. t('username') .'</em>';
  if (user_access('administer chats')) {
    $content .= '<br>/kick <em>'. t('username') .'</em>';
    $content .= '<br>/ban <em>'. t('username') .'</em>';
  }
  $title = t('chat commands');
  return array($content, $title);
}

/**
 * List site-wide chats.
 */
function chatroom_block_chats() {
  $content = '<ul class="menu" id="chatroom-sitewide-chats">';
  $chats = chatroom_get_active_chats(0, variable_get("chatroom_block_{$types[$delta][0]}", '5'));
  if ($chats) {
    foreach ($chats as $chat) {
      $chat_link = l(check_plain($chat->chatname), "chatrooms/chat/$chat->ccid");
      $room_link = l(check_plain($chat->room_name), "node/$chat->nid");
      $content .= '<li id="chat_'. $chat->ccid .'">'. $chat_link .'<br />';
      $content .= '<span class="chatroomLink">'. t('in room') .' '. $room_link .'</span></li>';
    }
  }
  else {
    $content .= '<li id="chat_empty"><em>'. t('There are no active chats.') .'</em></li>';
  }
  $content .= '</ul>';
  return $content;
}

/**
 * gets a list of active chats
 */
function chatroom_get_active_chats($start = null, $end = null) {
  $sql = 'SELECT     cc.*,
                     nr.title AS room_name,
                     cr.nid
          FROM       {chatroom_chat} AS cc
          INNER JOIN {chatroom} AS cr
          ON         cr.crid = cc.crid
          INNER JOIN {node_revisions} AS nr
          ON         nr.nid = cr.nid
          WHERE      cc.when_archived IS NULL
          ORDER BY   cc.modified DESC';
  if (is_null($start) || is_null($end)) {
    $result = db_query($sql);
  }
  else {
    $result = db_query_range($sql, $start, $end);
  }
  if (db_num_rows($result)) {
    $chats = array();
    while ($chat = db_fetch_object($result)) {
      $chats[] = $chat;
    }
    return $chats;
  }
  return false;
}

/**
 * List chat rooms.
 */
function chatroom_block_rooms() {
  $content = '';
  if ($_GET['q'] != 'chatrooms') {
    $content = '<ul class="menu" id="chatroom-sitewide-chatrooms">';
    $rooms = chatroom_get_chatroom_list(0, variable_get("chatroom_block_{$types[$delta][0]}", '5'));
    if (is_array($rooms)) {
      foreach ($rooms as $room) {
        $content .= '<li id="chatroom_'. $room->nid .'">'. l(check_plain($room->title), "node/$room->nid") .'</li>';
      }
    }
    else {
      $content .= '<li id="chatroom_empty"><em>There are no active chat rooms.</em></li>';
    }
    $content .= '</ul>';
  }
  return $content;
}

/**
 * gets a list of online users in a given chat
 */
function chatroom_block_chat_online_list() {
  if (!preg_match('/^chatrooms\/chat\/(\d+)/', $_GET['q'], $matches)) {
    return array(false, false);
  }
  $title = '';
  $content = '';
  $cache_file = file_directory_temp() .'/drupal_chat_cache/'. chatroom_chat_get_cache_file_name($matches[1]);
  $cache_timestamp = @filemtime($cache_file);
  if ($users = chatroom_chat_get_online_list($matches[1], $cache_timestamp)) {
    $content = '<ul class="menu" id="chatroom-online">';
    foreach ($users as $ol_user) {
      $name = $ol_user->name ? check_plain($ol_user->name) : "guest-{$ol_user->guest_id}";
      $content .= '<li id="'. $ol_user->session_id .'"';
      $content .= $ol_user->away ? ' class="chatroom-user-away" ' : '';
      if ($ol_user->uid) {
        $content .= '><a href="javascript:chatroomSelectUser(\''. $ol_user->name .'\')">'. check_plain($name).'</a></li>';
      }
      else {
        $content .= ">$name</li>";
      }
    }
    $content .= '</ul>';
    $title = t('Who is online in %chat', array('%chat' => $ol_user->chatname));
  }
  return array($content, $title);
}

/**
 * outputs html for list of online users for the whole site
 */
function chatroom_block_site_online_list() {
  global $user;
  $title = t('online chat room users');
  chatroom_site_update_online_time($user->uid);
  $users = chatroom_get_site_online_list();
  $content = '<ul class="menu" id="chatroom-sitewide-online">';
  $ol_users = array();
  $users_js = array();
  if (count($users)) {
    foreach ($users as $ol_user) {
      $content .= '<li id="user-li-'. $ol_user->uid .'"><a href="#user" id="user-'. $ol_user->uid .'">';
      $content .= check_plain($ol_user->name).'</a></li>';
      $ol_users[] = array(
        'user' => $ol_user->name,
        'uid' => (int) $ol_user->uid,
      );
    }
    foreach ($ol_users as $ol_user) {
      $users_js[] = (object) $ol_user;
    }
  }
  else {
    $content .= '<li id="no_users"><em>'. t('There are no other users online.') .'</em></li>';
  }
  $content .= '</ul>';
  $users_js = drupal_to_js($users_js);
  drupal_set_html_head('<script type="text/javascript">var chatroomBlockUsers = '. $users_js .';</script>');
  return array($content, $title);
}

/**
 * helper function to add some state information to block pages
 */
function chatroom_block_add_state_js() {
  global $user, $base_url;

  // only do this once per request
  static $state_set = false;
  if ($state_set === true) {
    return;
  }
  $state_set = true;

  // need some css for the user list display when not in chat room chat page
  if (substr($_GET['q'], 0, strlen('chatrooms/chat/')) != 'chatrooms/chat/') {
    drupal_add_css(drupal_get_path('module', 'chatroom') .'/chatroom.css');
  }

  $chat_cache_file = chatroom_block_get_cache_file('chats');
  $room_cache_file = chatroom_block_get_cache_file('chatrooms');
  $module_base = drupal_get_path('module', 'chatroom');

  $js = array(
    'blockUrl' => $base_url .'/'. $module_base .'/chatroomread.php',
    'moduleBase' => $module_base,
    'roomBase' => url('node/'),
    'chatBase' => url('chatrooms/chat/'),
    'chatCacheFile' => $chat_cache_file,
    'roomCacheFile' => $room_cache_file,
    'userBase' => drupal_get_path('module', 'user'),
    'updateInterval' => variable_get('chatroom_block_poll_freq', 5000),
    'chatTimestamp' => @file_exists($chat_cache_file) ? @filemtime($chat_cache_file) : time() - 5,
    'roomTimestamp' => @file_exists($room_cache_file) ? @filemtime($room_cache_file) : time() - 5,
    'uid' => (int) $user->uid,
  );
  $js = (object) $js;
  $js = drupal_to_js($js);

  drupal_set_html_head('<script type="text/javascript">var chatroomBlock = '. $js .';</script>');
  drupal_add_js(drupal_get_path('module', 'chatroom') .'/chatroom.block.js');
}

/**
 * Menu callback; prints a chat room listing.
 */
function chatroom_page() {
  foreach (chatroom_get_chatroom_list() as $room) {
    $tree[$room->nid] = node_load($room->nid);
  }
  return theme('chatroom_display', $tree);
}

/**
 * Format the chat room listing.
 *
 * @ingroup themeable
 */
function theme_chatroom_display($tree) {
  global $user;
  // chat room list, chats list, and 'add new chat' link

  if (count($tree)) {
    $output  = '<div id="chatroom">';
    $output .= '<ul>';

    if (user_access('create chat rooms')) {
      $output .= '<li>'. l(t('Post a new chat room.'), "node/add/chatroom") .'</li>';
    }
    else if ($user->uid) {
      //
    }
    else {
      $output .= '<li>'. t('<a href="!login">Login</a> to post a new chat room.', array('!login' => url('user/login'))) .'</li>';
    }
    $output .= '</ul>';
    $output .= theme('chatroom_list', $tree);
    $output .= '</div>';
  }
  else {
    drupal_set_title(t('No chat rooms defined'));
    $output = '';
  }

  return $output;
}

/**
 * Format the chat room table.
 *
 * @ingroup themeable
 */
function theme_chatroom_list($tree) {
  global $user;

  if ($tree) {
    $header = array(t('Chat room'), t('Chats'), t('Messages'), t('Last message'));
    foreach ($tree as $room) {
      $description  = "<div>\n";
      $description .= ' <div class="name">'. l($room->title, "node/$room->nid").'</div>';

      if ($room->body) {
        $description .= ' <div class="description">'. filter_xss_admin($room->body) ."</div>\n";
      }
      $description .= "</div>\n";

      $rows[] = array(array('data' => $description, 'class' => 'container', 'colspan' => '4'));

      if (isset($room->chatroom->chats)) {
        foreach ($room->chatroom->chats as $id => $chat) {
          $description  = "<div>\n";
          if (empty($chat->when_archived)) {
            $description .= ' <div class="name">'. l($chat->chatname, "chatrooms/chat/$chat->ccid") ."</div>\n";
          }
          else {
            $description .= ' <div class="name">'. l($chat->chatname, "chatrooms/archives/$chat->ccid") ."</div>\n";
          }
          $description .= "</div>\n";

          $row[] = array('data' => '&nbsp;');
          $row[] = array('data' => $description, 'class' => 'chatroom-chat');
          $row[] = array('data' => $chat->msg_count, 'class' => 'chatroom-msg-count');
          $row[] = array('data' => $chat->msg_info, 'class' => 'chatrom-msg-info');
          $rows[] = $row;
          unset($row);
        }
      }
    }
    return theme('table', $header, $rows);
  }
}

/**
 * tells a kicked out user not to be a knob
 */
function chatroom_chat_kicked_user($chat_id = false) {
  if (!$chat_id || !$chat = chatroom_chat_get_from_id($chat_id)) {
    return drupal_not_found();
  }
  else {
    $msg = $chat->kicked_out_message ? $chat->kicked_out_message : t('You have been kicked out of a chat for misbehaving.');
  }
  return '<div id="chatroom-kicked-msg">'. $msg .'</div>';
}

/**
 * loads the UI for a chat, and registers this user as online
 */
function chatroom_chat($chat_id = false) {
  if ($chat_id === false || !($chat = chatroom_chat_get_from_id($chat_id)) || isset($chat->when_archived)) {
    return drupal_not_found();
  }
  if (chatroom_is_banned_user($chat->crid)) {
    $msg = $chat->banned_message ? $chat->banned_message : t('You have been banned from this chat room.');
    return '<div id="chatroom-banned-msg">'. $msg .'</div>';
  }
  if (variable_get('chatroom_auto_archive', FALSE)) {
    chatroom_archive_old_msgs($chat_id);
  }
  chatroom_chat_register_user($chat->ccid);
  chatroom_chat_set_cache($chat->ccid);
  drupal_add_css(drupal_get_path('module', 'chatroom') .'/chatroom.css');
  drupal_add_js(drupal_get_path('module', 'chatroom') .'/chatroom.js');
  chatroom_chat_add_state_js($chat, session_id());

  $bc = drupal_get_breadcrumb();
  $bc[] = l(check_plain($chat->chatroom_name), "node/$chat->nid");
  drupal_set_breadcrumb($bc);

  drupal_set_title(check_plain($chat->chatname));
  $html = '<div id="chatroom-container">';
  $html .= theme('chatroom_chat_board');
  $html .= theme('chatroom_chat_textentry');
  $html .= '</div>';
  return $html;
}

/**
 * Move old messages to archive.
 */
function chatroom_archive_old_msgs($chat_id) {
  if ($chat_id != FALSE) {
    $msgs = chatroom_chat_get_latest_msgs($chat_id, 0);
    $result = db_query('INSERT INTO {chatroom_msg_archive}
                        (cmid, ccid, uid, msg_type, msg, session_id, recipient, modified)
                            SELECT *
                            FROM   {chatroom_msg}
                            WHERE  ccid = %d
                            AND    cmid < %d',
                            $chat_id, $msgs[0]->cmid);
    if ($result) {
      db_query('DELETE FROM {chatroom_msg} WHERE ccid = %d AND cmid < %d', $chat_id, $msgs[0]->cmid);
    }
  }
}

/**
 * Handles update or insert for user when loading a chat room.
 *
 * mysql 3.23 compatability patch form pacheco - thanks!
 * http://drupal.org/node/70949
 */
function chatroom_chat_register_user($chat_id) {
  global $user;
  $session_id = session_id();
  $cache_file = file_directory_temp() .'/drupal_chat_cache/'. chatroom_chat_get_cache_file_name($chat_id);
  chatroom_chat_update_cache($cache_file);
  $result = db_query("SELECT coid
                      FROM   {chatroom_online_list}
                      WHERE  ccid = %d
                      AND    uid = %d
                      AND    session_id = '%s'",
            $chat_id, $user->uid, $session_id);

  if (db_num_rows($result)) {
    chatroom_chat_update_online_time($chat_id, $user->uid, $session_id);
  }
  else {
    db_lock_table('chatroom_online_list');
    $result = db_query("SELECT COALESCE(MAX(guest_id) + 1, 1)
                        FROM {chatroom_online_list}
                        WHERE  ccid = %d",
                        $chat_id);
    if ($result && db_num_rows($result)) {
      $is_admin = user_access('administer chats') ? 1 : 0;
      db_query("INSERT INTO {chatroom_online_list} (ccid, uid, is_admin, session_id, guest_id, modified)
                VALUES (%d, %d, %d, '%s', %d, %d)",
                $chat_id, $user->uid, $is_admin, $session_id, db_result($result), time());
    }
    db_unlock_tables();
  }
}

/**
 * helper function to add some state information to a chat page
 */
function chatroom_chat_add_state_js($chat, $session_id) {
  global $user, $base_url;

  $chatroom_base = drupal_get_path('module', 'chatroom');
  $cache_file = file_directory_temp() .'/drupal_chat_cache/'. chatroom_chat_get_cache_file_name($chat->ccid);
  $cache_timestamp = @filemtime($cache_file);
  $users = chatroom_chat_get_online_list($chat->ccid, $cache_timestamp);
  $ol_users = array();
  if (!empty($users)) {
    foreach ($users as $ol_user) {
      $name = $ol_user->name ? check_plain($ol_user->name) : "guest-{$ol_user->guest_id}";
      $ol_user = array(
        'user' => $name,
        'sessionId' => $ol_user->session_id,
        'uid' => $ol_user->uid,
        'away' => (int) $ol_user->away,
      );
      $ol_user = (object) $ol_user;
      $ol_users[] = $ol_user;
    }
  }
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }

  $js = array(
    'chatId' => $chat->ccid,
    'lastMsgId' => 0,
    'cacheTimestamp' => $cache_timestamp,
    'updateCount' => 0,
    'chatUrl' => $base_url .'/'. $chatroom_base .'/chatroomread.php',
    'kickUrl' => url('chatrooms/kicked/user'),
    'banUrl' => url('chatrooms/banned/user'),
    'userBase' => drupal_get_path('module', 'user'),
    'chatroomBase' => $chatroom_base,
    'smileysBase' => drupal_get_path('module', 'smileys'),
    'smileysMarker' => '------',
    'userUrl' => url('user/'),
    'chatCacheFile' => $cache_file,
    'updateInterval' => $chat->poll_freq,
    'idleInterval' => $chat->idle_freq,
    'userList' => $ol_users,
    'onlineList' => variable_get('chatroom_online_list', 0),
    'userColours' => array(),
    'sessionId' => $session_id,
    'timezone' => $timezone,
  );
  $js = (object) $js;
  $js = drupal_to_js($js);

  drupal_set_html_head('<script type="text/javascript">var chatroom = '. $js .';</script>');
}

/**
 * returns html for the message board
 */
function theme_chatroom_chat_board() {
  return '<div id="chatroom-board"></div>';
}

/**
 * returns html for the text entry widget
 * themeable
 */
function theme_chatroom_chat_textentry() {
  $output  = '<div class="clear-both"></div>'."\n";
  $output .= '<div id="chatroom-textentry">'."\n";
  $output .= '<span class="chatroom-textentry-title">'. t('Type your message') .'</span><br/><br/>'."\n";
  $output .= '<input type="text" id="chatroom-msg-input" size="50" />'."\n";
  $output .= '<input type="submit" id="chatroom-msg-submit" value="Send" />'."\n";
  $output .= chatroom_smileys_get_textentry();
  $output .= '<div class="chatroom-textentry-options"><label><input type="checkbox" id="chatroom-msg-away" /> set my status to "away"</label></div>'."\n";
  $output .= '</div>'."\n";
  return $output;
}

/**
 * smileys module support
 * return text entry smileys list
 */
function chatroom_smileys_get_textentry() {
  if (chatroom_smileys_supported() && chatroom_smileys_enabled()) {
    $hidden = variable_get('chatroom_smileys_showtextentry', 0) ? '' : '-hidden';
    $content = '<div class="chatroom-textentry-smileys'. $hidden.'">';
    $list = _smileys_list();
    foreach ($list as $smiley) {
      $alt = check_plain(implode(' &nbsp; ', explode(' ', $smiley->acronyms)));
      $acronyms = explode(' ', $smiley->acronyms);
      $id = ' id="_'. md5($acronyms[0]) .'" ';
      $content .= $hidden ? '' : '<a href="javascript:chatroomSmileyInsert(\''. $acronyms[0] .'\')">';
      $content .= '<img'. $id .'src="'. check_url(base_path() . $smiley->image) .'" title="'. $alt .'" alt="'. $alt .'" />';
      $content .= $hidden ? '' : '</a>';
    }
    $content .= '</div>';
    return $content;
  }
}

/**
 * loads an archived chat
 */
function chatroom_chat_archive($chat_id = false) {
  if ($chat_id === false || !($chat = chatroom_chat_get_from_id($chat_id)) || !isset($chat->when_archived)) {
    return drupal_not_found();
  }
  if (chatroom_is_banned_user($chat->crid)) {
    $msg = $chat->banned_message ? $chat->banned_message : t('You have been banned from this chat room.');
    return '<div id="chatroom-banned-msg">'. $msg .'</div>';
  }
  drupal_add_css(drupal_get_path('module', 'chatroom') .'/chatroom.css');
  $bc = drupal_get_breadcrumb();
  $bc[] = l(check_plain($chat->chatroom_name), "node/$chat->nid");
  drupal_set_breadcrumb($bc);
  drupal_set_title(check_plain($chat->chatname));
  $html = '<p>'. t('This chat was archived on !date.', array('!date' => format_date($chat->when_archived, 'medium'))) .'</p>';
  $html .= '<div id="chatroom-container-archive">';
  if ($msgs = chatroom_get_all_msgs($chat->ccid, TRUE)) {
    foreach ($msgs as $msg) {
      $name = $msg->name ? $msg->name : 'guest-'. $msg->guest_id;
      $html .= '<p><span class="chatroom-archive-user">['. format_date($msg->modified, 'custom', 'G:i') .'] ';
      $html .= $name .': </span>'. $msg->msg .'</p>';
    }
  }
  else {
    $html .= '<p>'. t('This chat contains no messages') .'</p>';
  }
  return $html .'</div>';
}

/**
 * get all msgs for a given chat
 */
function chatroom_get_all_msgs($chat_id, $archive = FALSE) {
  $table = $archive ? 'chatroom_msg_archive' : 'chatroom_msg';
  $result = db_query('SELECT     cm.*,
                                 du.name,
                                 col.guest_id
                      FROM       {'. $table .'} AS cm
                      INNER JOIN {chatroom_online_list} AS col
                      ON         col.session_id = cm.session_id AND col.ccid = cm.ccid
                      LEFT JOIN  {users} AS du
                      ON         du.uid = cm.uid
                      WHERE      cm.ccid = %d
                      ORDER BY   cm.cmid ASC',
                      $chat_id);
  $msgs = array();
  while ($msg = db_fetch_object($result)) {
    $msgs[] = $msg;
  }
  return count($msgs) ? $msgs : FALSE;
}

/**
 * handles requests that read info about a chat
 */
function chatroom_chat_read_msgs($chat_id, $last_msg_id, $update_count, $cache_file, $online_list = false, $timezone = 0, $smileys = false) {
  $cache_file = urldecode($cache_file);
  if (!chatroom_chat_is_registered_user($chat_id)) {
    return chatroom_send_ajax_response("[{kickUser:'". session_id() ."'}]");
  }
  global $user;
  chatroom_chat_update_online_time($chat_id, $user->uid, session_id());
  if ($msgs = chatroom_chat_get_latest_msgs($chat_id, $last_msg_id)) {
    $msg_js = chatroom_chat_get_latest_msgs_js($msgs, $timezone, $smileys);
  }
  else {
    $msg_js = '[]';
  }
  $users_js = '[]';
  $cache_timestamp = @filemtime($cache_file);
  if ($users = chatroom_chat_get_online_list($chat_id, $cache_timestamp)) {
    $users_js = chatroom_chat_get_online_list_js($users, true);
  }
  $cache_js = $cache_timestamp ? ",{cacheTimestamp:$cache_timestamp}" : '';
  return chatroom_send_ajax_response("[$msg_js, $users_js $cache_js]");
}

/**
 * handles requests that write a message into a chat
 */
function chatroom_chat_write_msg($chat_id, $last_msg_id, $cache_file, $msg, $recipient = null, $type = null, $timezone = 0, $smileys = false) {
  $cache_file = urldecode($cache_file);
  $session_id = session_id();
  if (!chatroom_chat_is_registered_user($chat_id)) {
    return chatroom_send_ajax_response("[{kickUser:'$session_id'}]");
  }
  if ($type == 'away' || $type == 'back') {
    return chatroom_chat_set_away_status($chat_id, $type, $cache_file);
  }
  global $user;
  db_query("UPDATE {chatroom_online_list}
            SET away = 0
            WHERE ccid = %d
            AND session_id = '%s'",
            $chat_id, $session_id);
  db_query("INSERT INTO {chatroom_msg} (ccid, uid, msg_type, msg, session_id, recipient, modified)
            VALUES (%d, %d, '%s', '%s', '%s', '%s', %d)",
            $chat_id, $user->uid, $type, stripslashes($msg), session_id(), $recipient, time());
  if ($msgs = chatroom_chat_get_latest_msgs($chat_id, $last_msg_id)) {
    $msg_js = chatroom_chat_get_latest_msgs_js($msgs, $timezone, $smileys);
  }
  else {
    $msg_js = '[]';
  }
  $users_js = '[]';
  $cache_timestamp  = @filemtime($cache_file);
  if ($users = chatroom_chat_get_online_list($chat_id, $cache_timestamp)) {
    $users_js = chatroom_chat_get_online_list_js($users, true);
  }
  $cache_js = '';
  $cache_timestamp = chatroom_chat_update_cache($cache_file);
  $cache_js = ",{cacheTimestamp:$cache_timestamp}";
  return chatroom_send_ajax_response("[$msg_js, $users_js $cache_js]");
}

/**
 * handles away status requests from a chat
 */
function chatroom_chat_set_away_status($chat_id, $status, $cache_file) {
  db_query("UPDATE {chatroom_online_list}
            SET away = %d
            WHERE ccid = %d
            AND session_id = '%s'",
            $status == 'away' ? 1 : 0, $chat_id, session_id());
  global $user;
  chatroom_chat_update_online_time($chat_id, $user->uid, session_id());
  if ($msgs = chatroom_chat_get_latest_msgs($chat_id, $last_msg_id)) {
    $msg_js = chatroom_chat_get_latest_msgs_js($msgs, $timezone, $smileys);
  }
  else {
    $msg_js = '[]';
  }
  $users_js = '[]';
  $cache_timestamp  = @filemtime($cache_file);
  if ($users = chatroom_chat_get_online_list($chat_id, $cache_timestamp)) {
    $users_js = chatroom_chat_get_online_list_js($users, true);
  }
  $cache_js = '';
  $cache_timestamp = chatroom_chat_update_cache($cache_file);
  $cache_js = ",{cacheTimestamp:$cache_timestamp}";
  return chatroom_send_ajax_response("[$msg_js, $users_js $cache_js]");
}

/**
 * updates chat's cache file modified time
 */
function chatroom_chat_update_cache($cache_file) {
  if (@touch($cache_file)) {
    return @filemtime($cache_file);
  }
  return false;
}

/**
 * kicks a user out of a chat
 */
function chatroom_chat_kick_user($chat_id, $session_id) {
  if (user_access('administer chats')) {
    db_query("DELETE FROM {chatroom_online_list} WHERE ccid = %d AND guest_id = '%s'", $chat_id, $session_id);
    chatroom_send_ajax_response("[{kickUser:'$session_id'}]");
  }
}

/**
 * Bans a user from a chat room.
 */
function chatroom_ban_user($chat_id, $session_id, $uid, $admin_uid) {
  if (user_access('administer chats')) {
    db_query("DELETE FROM {chatroom_online_list} WHERE ccid = %d AND guest_id = '%s'", $chat_id, $session_id);
    $chat = chatroom_chat_get_from_id($chat_id);
    db_query("INSERT INTO {chatroom_ban_list} (crid, uid, admin_uid) VALUES (%d, %d, %d)", $chat->crid, $uid, $admin_id);
    chatroom_send_ajax_response("[{banUser:'$session_id'}]");
  }
}

/**
 * checks if the user is registered in this chat
 */
function chatroom_chat_is_registered_user($chat_id) {
  $sql = "SELECT coid FROM {chatroom_online_list} WHERE ccid = %d AND session_id = '%s'";
  return db_num_rows(db_query($sql, $chat_id, session_id()));
}

/**
 * update a users online timestamp value
 */
function chatroom_chat_update_online_time($chat_id, $uid, $session_id) {
   db_query("UPDATE {chatroom_online_list}
             SET modified = %d
             WHERE ccid = %d
             AND uid = %d
             AND session_id = '%s'",
             time(), $chat_id, $uid, $session_id);
}

/**
 * Get all messages for chat room after last message.
 */
function chatroom_chat_get_latest_msgs($chat_id, $last_msg_id) {
  $session_id = db_result(db_query('SELECT guest_id FROM {chatroom_online_list} WHERE session_id = %d',session_id()));
  $order_by_clause = 'ORDER BY cm.cmid ASC';
  if ($last_msg_id == 0) {
    $order_by_clause = 'ORDER BY cm.cmid DESC LIMIT '. chatroom_chat_old_msg_count($chat_id);
  }
  $result = db_query("SELECT     cm.*,
                                 du.name,
                                 col.guest_id
                      FROM       {chatroom_msg} AS cm
                      INNER JOIN {chatroom_online_list} AS col
                      ON         col.session_id = cm.session_id AND col.ccid = cm.ccid
                      LEFT JOIN  {users} AS du
                      ON         du.uid = cm.uid
                      WHERE      cm.ccid = %d
                      AND        cm.cmid > %d
                      AND        (cm.recipient = '' OR cm.recipient = '%s' OR cm.session_id = '%s')
                      $order_by_clause",
                      $chat_id, $last_msg_id, $session_id, $session_id);
  $msgs = array();
  while ($msg = db_fetch_object($result)) {
    $msgs[] = $msg;
  }
  return count($msgs) ? ($last_msg_id ? $msgs : array_reverse($msgs)) : FALSE;
}

/**
 * the number of old messages to show when entering a chat
 */
function chatroom_chat_old_msg_count($chat_id) {
  $result = db_query('SELECT     cr.old_msg_count
                      FROM       {chatroom} AS cr
                      INNER JOIN {chatroom_chat} AS cc
                      ON         cc.crid = cr.crid
                      WHERE      cc.ccid = %d',
                      $chat_id);
  if (db_num_rows($result)) {
    return db_result($result);
  }
  return 20;
}

/**
 * takes an array of msgs and formats as js
 */
function chatroom_chat_get_latest_msgs_js($msgs, $timezone = 0, $smileys = false) {
  $js = '';
  $i = 0;
  $msg_count = count($msgs);
  foreach ($msgs as $msg) {
    if ($smileys) {
      $msg->msg = chatroom_smileys_filter_process($msg->msg);
    }
    $name = $msg->name ? $msg->name : "guest-{$msg->guest_id}";
    $time = gmdate('G:i', $msg->modified + $timezone);
    $js .= '{id:'. $msg->cmid .',text:"'. str_replace(array("\\", '"'), array("\\\\", '\"'), $msg->msg);
    $js .= '",user:"'. $name .'",time:"'. $time .'",recipient:"'. $msg->recipient .'",';
    $js .= 'type:"'. $msg->msg_type .'"}'. (++$i == $msg_count ? '' : ',');
  }
  return "{msgs:[$js]}";
}

/**
 * takes an array of online users and formats as js
 */
function chatroom_chat_get_online_list_js($users, $object = false) {
  $js_array = array();
  foreach ($users as $ol_user) {
    $name = $ol_user->name ? check_plain($ol_user->name) : "guest-{$ol_user->guest_id}";
    $js = '';
    $js .= '{user:"'. $name .'",sessionId:"'. $ol_user->session_id;
    $js .= '",uid:'. $ol_user->uid .',away:'. $ol_user->away .'}';
    $js_array[] = $js;
  }
  if ($object) {
    return '{onlineList:['. implode(',', $js_array) .']}';
  }
  return '['. implode(',', $js_array) .']';
}

/**
 * smileys module support
 * test if smileys module is avaliable
 */
function chatroom_smileys_supported() {
  return function_exists('_smileys_list');
}

/**
 * smileys module support - test if smileys module is enabled
 * can't use variable_get because we might only have session bootstrap
 */
function chatroom_smileys_enabled() {
  return unserialize(db_result(db_query("SELECT value FROM {variable} WHERE name = 'chatroom_smileys_enabled'")));
}

/**
 * smileys module support - process smileys filtering
 * this is modified from smileys.module
 * - because we don't have full bootstrap
 * - because we don't want to send html, just data about image
 */
function chatroom_smileys_filter_process($text) {
  if (!chatroom_smileys_supported() || !chatroom_smileys_enabled()) {
    return $text;
  }
  $text = ' '. $text .' ';
  $list = _smileys_list();
  $marker = '------';
  foreach ($list as $smiley) {
    $acronyms = explode(" ", $smiley->acronyms);
    $alt = str_replace('\\', '\\\\', check_plain($smiley->description));
    foreach ($acronyms as $acronym) {
      if ($smiley->standalone) {
        $replace = "\\1{$marker}_". md5($acronyms[0]) ."$marker\\2";
        $text = eregi_replace("([ ,\.\?!:\(\)\r\n\<\>])". preg_quote($acronym) ."([ ,\.\?!:\(\)\r\n\<\>])", $replace, $text);
      }
      else {
        $replace = $marker .'_'. md5($acronyms[0]) . $marker;
        $text = eregi_replace(preg_quote($acronym), $replace, $text);
      }
    }
  }
  return substr($text, 1, -1);
}

/**
 * sets the chat's cache file by touching it
 */
function chatroom_chat_set_cache($chat_id) {
  $chat_file = chatroom_chat_get_cache_file_path($chat_id);
  if (!file_exists($chat_file)) {
    @touch($chat_file);
  }
}

/**
 * gets the chat cache file path. this function is called when loading the
 * chat room UI, and the value is stored in the browser. this allows the
 * common ajax operations to check the cache before loading up Drupal
 */
function chatroom_chat_get_cache_file_path($chat_id) {
  $cache_file = chatroom_chat_get_cache_file_name($chat_id);
  $cache_directory = file_directory_temp() .'/drupal_chat_cache';
  file_check_directory($cache_directory, 1);
  return $cache_directory ."/$cache_file";
}

/**
 * get the chat's cache file name
 */
function chatroom_chat_get_cache_file_name($chat_id) {
  if ($_SERVER['PHP_SELF'] == '/index.php') {
    $site_path = '';
  }
  else {
    $site_path = substr($_SERVER['PHP_SELF'], 1, -strlen('/index.php'));
    $site_path = str_replace(array('/', '.', ' '), array('_', '_', '-'), $site_path) .'_';
  }
  return $site_path .'chat_'. $chat_id;
}

/**
 * Returns a chat room object for $chat_id.
 */
function chatroom_chat_get_from_id($chat_id) {
  $result = db_query('SELECT     cc.*,
                                 n.title AS chatroom_name,
                                 n.nid,
                                 cr.poll_freq,
                                 cr.idle_freq,
                                 cr.kicked_out_message,
                                 cr.banned_message
                      FROM       {chatroom_chat} AS cc
                      INNER JOIN {chatroom} AS cr
                      ON         cr.crid = cc.crid
                      INNER JOIN {node} AS n
                      ON         n.nid = cr.nid
                      WHERE      cc.ccid = %d',
                      $chat_id);
  if ($result && db_num_rows($result)) {
    return db_fetch_object($result);
  }
  return FALSE;
}

/**
 * send response to ajax requests
 */
function chatroom_send_ajax_response($response) {
  header("Last-Modified: ". gmdate("D, d M Y H:i:s") ." GMT");
  header("Cache-Control: no-store, no-cache, must-revalidate");
  header("Cache-Control: post-check=0, pre-check=0", false);
  header("Pragma: no-cache");
  return $response;
}

/**
 * gets the js to update an active chats block
 */
function chatroom_block_chat_update_js($cache_file) {
  $timestamp = @filemtime($cache_file);
  $chats = chatroom_get_active_chats(0, variable_get('chatroom_block_chats', '5'));
  if ($chats) {
    $chat_js = '';
    foreach ($chats as $chat) {
      $chat_js .= '{chatName:"'. $chat->chatname .'",chatListId:"chat_'. $chat->ccid .'",';
      $chat_js .= 'ccid:'. $chat->ccid .',roomName:"'. $chat->room_name .'",crid:'. $chat->crid .'},';
    }
    return "{chatList:[$chat_js $timestamp]}";
  }
  return "{chatList:[$timestamp]}";
}

/**
 * gets the js to update an active chat rooms block
 */
function chatroom_block_room_update_js($cache_file) {
  $timestamp = @filemtime($cache_file);
  $rooms = chatroom_get_chatroom_list(0, variable_get('chatroom_block_chatrooms', '5'));
  if ($rooms) {
    $room_js = '';
    foreach ($rooms as $room) {
      $room_js .= '{chatroomName:"'. $room->title .'",chatroomListId:"chatroom_'. $room->nid .'",';
      $room_js .= 'crid:'. $room->nid .'},';
    }
    return "{chatroomList:[$room_js $timestamp]}";
  }
  return "{chatroomList:[$timestamp]}";
}

/**
 * gets the js to update an online user list block
 */
function chatroom_block_online_list_update_js($uid) {
  chatroom_site_update_online_time($uid);
  $users = chatroom_get_site_online_list();
  $users_js = array();
  if (count($users)) {
    foreach ($users as $ol_user) {
      if ($uid != $ol_user->uid) {
        $users_js[] = '{user:"'. $ol_user->name .'",uid:'. $ol_user->uid .'}';
      }
    }
  }
  $user_js = '{userList:['. implode(',', $users_js) .']}';
  return $user_js;
}

/**
 * updates a users online time
 */
function chatroom_site_update_online_time($uid) {
  db_query('UPDATE {users} SET access = %d WHERE uid = %d', time(), $uid);
}

/**
 * updates a block cache file
 */
function chatroom_block_update_cache($type) {
  @touch(chatroom_block_get_cache_file($type));
}

/**
 * get block cache file
 */
function chatroom_block_get_cache_file($type) {
  global $base_url;
  $chatroom_base  = drupal_get_path('module', 'chatroom');
  $url  = $base_url .'/'. $chatroom_base .'/chatroomread.php';
  $cache_directory = file_directory_temp() .'/drupal_chat_cache';
  file_check_directory($cache_directory, 1);
  return $cache_directory ."/{$type}_". md5($_SERVER['HTTP_HOST'] . $url);
}

/**
 * gets a list of online users, not including the current user
 */
function chatroom_get_site_online_list() {
  global $user;
  $users = array();
  $time_period = 2 * variable_get('chatroom_online_list_update_freq', 5);
  $result = db_query('SELECT uid, name FROM {users} WHERE access >= %d AND uid != 0', time() - $time_period);
  while ($ol_user = db_fetch_object($result)) {
    if ($user->uid != $ol_user->uid) {
      $users[] = $ol_user;
    }
  }
  return $users;
}

/**
 * Checks if the user is banned from the chat room - returns false if not.
 */
function chatroom_is_banned_user($crid) {
  global $user;
  static $result = null;
  if (!is_null($result)) {
    return $result;
  }
  if ($user->uid == 0) {
    $result = false;
  }
  else {
    $result = db_num_rows(db_query("SELECT crid FROM {chatroom_ban_list} WHERE crid = %d AND uid = %d", $crid, $user->uid));
  }
  return $result;
}

/**
 * returns the list of available chat rooms
 */
function chatroom_get_chatroom_list($start = null, $end = null) {
  $sql = 'SELECT     nr.*,
                     COUNT(cc.ccid) AS chat_count
          FROM       {chatroom} AS cr
          INNER JOIN {node_revisions} AS nr
          ON         nr.nid = cr.nid
          INNER JOIN {node} AS n
          ON         n.nid = nr.nid
          LEFT JOIN  {chatroom_chat} AS cc
          ON         cc.crid = cr.crid
          WHERE      cc.when_archived IS NULL
          GROUP BY   cr.crid
          ORDER BY   n.sticky DESC, nr.timestamp DESC';
  if (is_null($start) || is_null($end)) {
    $result = db_query(db_rewrite_sql($sql));
  }
  else {
    $result = db_query_range($sql, $start, $end);
  }
  if ($result && db_num_rows($result)) {
    while ($room = db_fetch_object($result)) {
      $rooms[] = $room;
    }
    return $rooms;
  }
  return array();
}

/**
 * Get a list of online users in a given chat.
 * Return the current user at the top of the list.
 * Users who do not update within five seconds after the last message is
 * sent are dropped from the online list.
 */
function chatroom_chat_get_online_list($chat_id, $cache_timestamp) {
  if ($cache_timestamp < time() - 5) {
    db_query("UPDATE {chatroom_chat} SET modified = %d WHERE ccid = %d", $cache_timestamp, $chat_id);
  }
  $result = db_query("SELECT     col.uid,
                                 col.session_id,
                                 col.guest_id,
                                 col.away,
                                 cc.chatname,
                                 du.name
                      FROM       {chatroom_online_list} AS col
                      INNER JOIN {chatroom_chat} AS cc
                      ON         cc.ccid = col.ccid
                      LEFT JOIN  {users} AS du
                      ON         du.uid = col.uid
                      WHERE      col.ccid = %d
                      AND        col.modified > cc.modified",
                      $chat_id);
  $users = array();
  $session_id = session_id();
  while ($row = db_fetch_object($result)) {
    if ($row->session_id == $session_id) {
      $current_user = $row;
    }
    else {
      $row->session_id = $row->guest_id;
      $users[] = $row;
    }
  }
  if (isset($current_user)) {
    array_unshift($users, $current_user);
  }
  return count($users) ? $users : FALSE;
}

