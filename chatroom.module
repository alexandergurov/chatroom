<?php
/**
 * $Id$
 * 
 * @file
 * Enable chatroom support in Drupal
 */

/**
 * Implementation of hook_node_info().
 */
function chatroom_node_info() {
  return array('chatroom' => array('name' => t('chatroom'), 'base' => 'chatroom'));
}

/**
 * Implementation of hook_help().
 */
function chatroom_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables chatrooms in Drupal.');
    case 'node/add#chatroom':
      return t('If you want to add a chatroom.');
  }
}

/**
 * Implementation of hook_perm().
 */
function chatroom_perm() {
  return array('access chatrooms', 'create chatrooms', 'edit own chatrooms', 'administer chats', 'administer chatrooms', 'create chats');
}

/**
 * Implementation of hook_menu().
 */
function chatroom_menu($may_cache) {
  $items = array();
  $items[] = array('path' => 'node/add/chatroom',
    'title' => t('chatroom'),
    'access' => user_access('create chatrooms'));
  $items[] = array('path' => 'chatrooms',
    'callback' => 'chatroom_home',
    'access' => user_access('access chatrooms'),
    'title' => t('chatrooms'),
    'type' => MENU_SUGGESTED_ITEM);
  $items[] = array('path' => 'admin/chatroom',
    'callback' => 'chatroom_administer_form',
    'title' => t('chatroom'),
    'access' => user_access('administer chatrooms'),
    'type' => MENU_NORMAL_ITEM);
  $items[] = array('path' => 'chatrooms/kicked/user',
    'callback' => 'chatroom_chat_kicked_user',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'chatrooms/chat',
    'callback' => 'chatroom_chat',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'chatrooms/popout-chat',
    'callback' => 'chatroom_popout_chat',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'chatrooms/archives',
    'callback' => 'chatroom_chat_archive',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'chatrooms/chat/insert-invite',
    'callback' => 'chatroom_chat_insert_invite',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'chatrooms/chat/accept-invite',
    'callback' => 'chatroom_chat_accept_invite',
    'access' => user_access('access chatrooms'),
    'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Implementation of hook_access().
 */
function chatroom_access($op, $node) {
  global $user;
  if ($op == 'create') {
    return user_access('create chatrooms');
  }
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own chatrooms') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_form().
 */
function chatroom_form(&$node) {
  global $user;
  $old_msg_range = array();
  for ($i = 1; $i <= 25; $i++) {
    $old_msg_range[$i] = $i * 10;
  }
  $form['title'] = array(
    '#type' => 'textfield', 
    '#title' => t('Name'), 
    '#default_value' => check_plain($node->title), 
    '#required' => TRUE
  );
  $form['chatroom']['auto_archive'] = array(
    '#type' => 'checkbox', 
    '#attributes' => $node->chatroom->auto_archive ? array('checked' => 'checked') : null,
    '#title' => t('Check this box if you would like chats to be automatically archived when all users leave')
  );
  $form['chatroom']['idle_freq'] = array(
    '#type' => 'select',
    '#title' => t('Chatroom idle time, in seconds'),
    '#default_value' => $node->chatroom->idle_freq / 1000,
    '#options' => drupal_map_assoc(array(20, 40, 60, 80, 100, 120, 140, 160, 180)),
    '#description' => t('How many seconds between each message before a last message time is written in the chat.'),
  );
  $form['chatroom']['poll_freq'] = array(
    '#type' => 'select',
    '#title' => t('Chatroom update frequency, in seconds'),
    '#default_value' => $node->chatroom->poll_freq / 1000,
    '#options' => drupal_map_assoc(range(1,10)),
    '#description' => t('How many seconds between each request for updates to the server.'),
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea', 
    '#title' => t('Description'), 
    '#default_value' => filter_xss($node->body), 
    '#rows' => 3, 
    '#weight' => -20,
    '#description' => t('Describe your chatroom so other people will know if they want to join.'),
    '#required' => TRUE
  );
  $form['chatroom']['old_msg_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of old messages to show when entering a chat'),
    '#default_value' => $node->chatroom->old_msg_count,    
    '#options' => drupal_map_assoc($old_msg_range),
  );
  $form['chatroom']['kicked_out_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Chatroom kicked out message'), 
    '#default_value' => filter_xss($node->chatroom->kicked_out_msg),
    '#rows' => 3, 
    '#description' => t('This text will appear on the page kicked out users are sent to.'),
  );
  $form['chatroom']['banned_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Chatroom banned message'), 
    '#default_value' => filter_xss($node->chatroom->banned_msg),
    '#rows' => 3, 
    '#description' => t('This text will appear on the page banned users are sent to.'),
  );
  if (count($node->chatroom->banned_users)) {
    foreach ($node->chatroom->banned_users as $banned_user) {
      $banned_users[$banned_user->uid] = check_plain($banned_user->name);
    }
    $form['chatroom_banned_users'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Manage banned users'), 
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE, 
    );
    $form['chatroom_banned_users']['unban_list'] = array(
      '#type' => 'checkboxes', 
      '#options' => $banned_users,
      '#description' => t('Check the users you would like to unban')
    );
  }
  if (count($node->chatroom->chats)) {
    foreach ($node->chatroom->chats as $chat) {
      if ($chat->section != 'archives') {
        $chats[$chat->ccid] = check_plain($chat->chatname);
      }
    }
    $form['chatroom_chats'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Manage open chats'), 
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE, 
    );
    $form['chatroom_chats']['chat_list'] = array(
      '#type' => 'checkboxes', 
      '#options' => $chats,
      '#description' => t('Check the chats you would like to close')
    );
  }
  $form['body_filter']['format'] = filter_form($node->format);
  return $form;
}

/**
 * Implementation of hook_update()
 */
function chatroom_update($node) {
  db_query("UPDATE {chatroom} 
            SET poll_freq = %d, idle_freq = %d, auto_archive = %d, 
                old_msg_count = %d, kicked_out_message = '%s', banned_message = '%s' 
            WHERE nid = %d", 
            1000 * $node->poll_freq, 1000 * $node->idle_freq, $node->auto_archive, 
            $node->old_msg_count, $node->kicked_out_message, $node->banned_message, $node->nid);
  if (isset($node->chat_list)) {
    foreach ($node->chat_list as $chat_id) {
      if ($chat_id > 0) {
        chatroom_archive_chat($chat_id);
      }
    }
  }
  if (isset($node->unban_list)) {
    db_query('DELETE FROM {chatroom_ban_list} 
              WHERE crid = %d 
              AND uid IN ('. implode(',', $node->unban_list) .')',
              $node->chatroom->crid);
  }
}

/**
 * Implementation of hook_insert()
 */
function chatroom_insert($node) {
  $result = db_query("INSERT INTO {chatroom} 
                      (nid, poll_freq, idle_freq, kicked_out_message, banned_message, modified) 
                      VALUES (%d, %d, %d, '%s', '%s', UNIX_TIMESTAMP())", 
                     $node->nid, 1000 * $node->poll_freq, 1000 * $node->idle_freq, 
                     $node->kicked_out_message, $node->banned_message);
  if ($result) {
    chatroom_block_update_cache('chatrooms');
  }
}

/**
 * Implementation of hook_delete().
 */
function chatroom_delete(&$node) {
  db_query('DELETE FROM {chatroom} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {chatroom_ban_list} WHERE crid = %d', $node->chatroom->crid);
  if (isset($node->chatroom) && count($node->chatroom->chats)) {
    $ccids = implode(',', array_keys($node->chatroom->chats));
    db_query('DELETE FROM {chatroom_chat} WHERE crid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_msg} WHERE ccid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_online_list} WHERE ccid IN (%s)', $ccids);
    db_query('DELETE FROM {chatroom_msg_archive} WHERE ccid IN (%s)', $ccids);
  }
  chatroom_block_update_cache('chatrooms');
}

/**
 * Implementation of hook_load().
 */
function chatroom_load($node) {
  $c['chatroom'] = db_fetch_object(db_query('SELECT * FROM {chatroom} WHERE nid = %d', $node->nid));

  // if the user is banned, just return, don't load the rest of the chatroom info
  if (chatroom_is_banned_user($c['chatroom']->crid)) {
    return $c;
  }

  if ($c['chatroom']) {
    // get any chats
    $c['chatroom']->chats = chatroom_get_room_summary($c['chatroom']->crid);

    // get any banned users
    $c['chatroom']->banned_users = chatroom_get_banned_users($c['chatroom']->crid);
  }
  return $c;
}

/**
 * Implementation of hook_view().
 */
function chatroom_view(&$node) {
  $bc = drupal_get_breadcrumb();
  if (count($bc)) {
    $bc[] = l('Chatrooms', 'chatrooms/');
    drupal_set_breadcrumb($bc);
  }

  // if the user is banned, just tell them why
  if (chatroom_is_banned_user($node->chatroom->crid)) {
    $node->body = $node->chatroom->banned_message ? $node->chatroom->banned_message : t('You have been banned from this chatroom.');
    return;
  }

  // if the user can create chats, show the form
  if (user_access('create chats')) {
    $node->body .= chatroom_create_chat_form($node->chatroom->crid);
  }

  // if there are some chats, build some tables to display them
  if (count($node->chatroom->chats) > 0) {
    foreach ($node->chatroom->chats as $chat) {
      $type = $chat->section == 'chat' ? 'open' : 'archived';
      $rows[$type][] = array(
        array('data' => l(check_plain($chat->chatname), "chatrooms/$chat->section/$chat->ccid")), 
        array('data' => $chat->msg_count),
        array('data' => $chat->msg_info)
      );
    }
    if (count($rows['open'])) {
      $node->body .= '<h2>' . t('Open chats in this room') . '</h2>';
      $node->body .= theme('table', array(t('Chat name'), t('Message count'), t('Last message')), $rows['open']); 
    }
    if (count($rows['archived'])) {
      $node->body .= '<h2>' . t('Archived chats in this room') . '</h2>';
      $node->body .= theme('table', array(t('Chat name'), t('Message count'), t('When archived')), $rows['archived']); 
    }
  }
}

/**
 * replacement for hook_settings(), which will be deprecated with 4.8
 * this function validates info from settings form
 */
function chatroom_administer_validate($f_id, $f_values) {
  if ($f_values['chatroom_smileys_enabled'] == 0) {
    if ($f_values['chatroom_smileys_showtextentry'] == 1) {
      form_set_error('chatroom_smileys_showtextentry', t("You can't display smileys without enabling support for the module"));
    }
  }
}

/**
 * gets a list of banned users for a given chatroom
 */
function chatroom_get_banned_users($crid) {
  $sql = 'SELECT     cbl.uid,
                     u.name
          FROM       {chatroom_ban_list} AS cbl
          INNER JOIN {users} AS u
          ON         u.uid = cbl.uid
          WHERE      cbl.crid = %d';
  $banned_users = array();
  if ($result = db_query($sql, $crid)) {
    if ($banned_user = db_fetch_object($result)) {
      $banned_users[] = $banned_user;
    }
  }
  return $banned_users; 
}

/**
 * replacement for hook_settings(), which will be deprecated with 4.8
 * saves information from settings form
 */
function chatroom_administer_submit($f_id, $f_values) {
  $vars = array('list_description', 'smileys_enabled', 'smileys_showtextentry');
  foreach ($vars as $var) {
    variable_set('chatroom_'. $var, $f_values['chatroom_'. $var]);
  }
  drupal_set_message(t("Sitewide chatroom settings were saved"));
}

/**
 * replacement for hook_settings(), which will be deprecated with 4.8
 * this function display's site wide chatroom settings.
 */
function chatroom_administer_form() {
  $form['chatroom_list_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Chatroom submission information title'), 
    '#default_value' => variable_get('chatroom_list_description', ''),
    '#rows' => 3, 
    '#description' => t('This text will appear above the list of chatrooms for your site.'),
  );
  if (chatroom_smileys_supported()) {
    $form['chatroom_smileys_support'] = array(
     '#type' => 'fieldset',
     '#title' => t('Smileys module support'),    
    );  
    $form['chatroom_smileys_support']['chatroom_smileys_enabled'] = array(
     '#type' => 'checkbox',
     '#title' => t('enable smileys module support'),
     '#default_value' => variable_get('chatroom_smileys_enabled', 0),
    );
    $form['chatroom_smileys_support']['chatroom_smileys_showtextentry'] = array(
     '#type' => 'checkbox',
     '#title' => t('show smileys in entry boxes'),
     '#default_value' => variable_get('chatroom_smileys_showtextentry', 0),
    );
  }
  $form['chatroom_administer']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save settings')
  );
  return drupal_get_form('chatroom_administer', $form);
}

/**
 * Implementation of hook_block().
 */
function chatroom_block($op = 'list', $delta = 0, $edit = array()) {
  $types = array(array('chats',             'active chats'),
                 array('chatrooms',         'active chatrooms'),
                 array('online_chat_users', 'chat online list'),
                 array('online_site_users', 'sitewide online list'));

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t($types[0][1]);
      $blocks[1]['info'] = t($types[1][1]);
      $blocks[2]['info'] = t($types[2][1]);
      $blocks[3]['info'] = t($types[3][1]);
      return $blocks;

    case 'configure':
      $form["chatroom_block_{$types[$delta][0]}"] = array(
        '#type' => 'select', 
        '#title' => t("Number of {$types[$delta][1]} to display"), 
        '#default_value' => variable_get("chatroom_block_{$types[$delta][0]}", '5'), 
        '#options' => drupal_map_assoc(range(1, 15))
      );
      return $form;

    case 'save':
      variable_set("chatroom_block_{$types[$delta][0]}", $edit["chatroom_block_{$types[$delta][0]}"]);
      break;

    case 'view':
      /**
       * hack to set up cache files - can't find a way to do this on 
       * enable/disable of chatroom blocks
       */
      if ($types[$delta][0] != 'online_chat_users' && !@file_exists(chatroom_block_get_cache_file($types[$delta][0]))) {
        chatroom_block_update_cache($types[$delta][0]);
      }

      $content = '';
      if (user_access('access chatrooms')) {
        switch ($types[$delta][0]) {

          case 'chats':
            $content .= '<ul class="menu" id="chatroom-sitewide-chats">';
            $chats = chatroom_get_active_chats(0, variable_get("chatroom_block_{$types[$delta][0]}", '5'));
            if ($chats) {
              foreach ($chats as $chat) {
                $chat_link = l(check_plain($chat->chatname), "chatrooms/chat/$chat->ccid");
                $room_link = l(check_plain($chat->room_name), "node/$chat->nid");
                $content .= '<li id="chat_'. $chat->ccid .'">'. $chat_link .'<br />';
                $content .= '<span class="chatroomLink">in room '. $room_link .'</span></li>';
              }
            }
            else {
              $content .= '<li id="chat_empty"><em>There are no active chats</em></li>';
            }
            $content .= '</ul>';
            $block['subject'] = $content ? t($types[$delta][1]) : false;
            break;

          case 'chatrooms':
            if ($_GET['q'] != 'chatrooms') {
              $content .= '<ul class="menu" id="chatroom-sitewide-chatrooms">';
              $rooms = chatroom_get_chatroom_list(0, variable_get("chatroom_block_{$types[$delta][0]}", '5'));
              if (is_array($rooms)) {
                foreach ($rooms as $room) {
                  $content .= '<li id="chatroom_'. $room->nid .'">'. l(check_plain($room->title), "node/$room->nid") .'</li>';
                }
              }
              else {
                $content .= '<li id="chatroom_empty"><em>There are no active chatrooms</em></li>';
              }
              $content .= '</ul>';
            }
            $block['subject'] = $content ? t($types[$delta][1]) : false;
            break;

          case 'online_chat_users':
            list($content, $block['subject']) = chatroom_chat_block_online_list();
            break;

          case 'online_site_users':
            list($content, $block['subject']) = chatroom_block_site_online_list();
            break;
        }
        if ($content) {
          chatroom_block_add_state_js();
        }
        $block['content'] = $content;
        return $block;
     }
  }
}

/**
 * gets a list of active chats
 */
function chatroom_get_active_chats($start = null, $end = null) {
  $sql = 'SELECT     cc.*,
                     nr.title AS room_name,
                     cr.nid
          FROM       {chatroom_chat} AS cc
          INNER JOIN {chatroom} AS cr
          ON         cr.crid = cc.crid
          INNER JOIN {node_revisions} AS nr
          ON         nr.nid = cr.nid
          WHERE      cc.when_archived IS NULL 
          ORDER BY   cc.modified DESC';
  if (is_null($start) || is_null($end)) {
    $result = db_query($sql);
  }
  else {
    $result = db_query_range($sql, $start, $end);
  }
  if (db_num_rows($result)) {
    $chats = array();
    while ($chat = db_fetch_object($result)) {
      $chats[] = $chat;
    }
    return $chats;
  }
  return false;
}

/**
 * archive all msgs in a chat
 */
function chatroom_archive_chat($chat_id) {
  db_query('UPDATE {chatroom_chat} 
            SET when_archived = UNIX_TIMESTAMP() 
            WHERE ccid = %d', $chat_id);
  $result = db_query('INSERT INTO {chatroom_msg_archive} 
                      (cmid, ccid, uid, msg_type, msg, session_id, recipient, modified)
                          SELECT *
                          FROM   {chatroom_msg} 
                          WHERE  ccid = %d', $chat_id);
  if ($result) {
    db_query('DELETE FROM {chatroom_msg} WHERE ccid = %d', $chat_id);
  }
  else {
    db_query('UPDATE {chatroom_chat} 
              SET when_archived = NULL 
              WHERE ccid = %d', $chat_id);
  }
  chatroom_block_update_cache('chats');
  return $result;
}

/**
 * creates a chat
 */
function chatroom_create_chat_submit($f_id, $f_values) {
  global $user;
  $created = db_query("INSERT INTO {chatroom_chat} (crid, uid, chatname, modified) 
                       VALUES (%d, %d, '%s', UNIX_TIMESTAMP())", 
                      $f_values['room_id'], $user->uid, $f_values['chat_name']);
  if (!$created) {
    drupal_set_message(t("There was an error creating your chat"), 'error');
  }
  else {
    chatroom_block_update_cache('chats');
  }
}

/**
 * validates attempt to create chat - checks this name is not already in use
 */
function chatroom_create_chat_validate($f_id, $f_values) {
  $crid = $f_values['room_id'];
  $name = $f_values['chat_name'];
  $sql = "SELECT ccid FROM {chatroom_chat} WHERE crid = %d AND chatname = '%s' AND when_archived IS NULL";
  if (db_num_rows(db_query($sql, $crid, $name))) {
    form_set_error('chatroom_chat_name', t("A chat called '$name' already exists"));
  }
}

/**
 * returns a create chat form
 */
function chatroom_create_chat_form($room_id) {
  $form['chatroom_create_chat'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Create a new chat'), 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE 
  );
  $form['chatroom_create_chat']['chat_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Chat name'),
    '#size' => 30,
    '#required' => TRUE,
    '#description' => t('Enter the name for the chat'),
  );
  $form['chatroom_create_chat']['room_id'] = array(
    '#type' => 'hidden',
    '#value' => $room_id
  );
  $form['chatroom_create_chat']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Create chat')
  );
  return drupal_get_form('chatroom_create_chat', $form);
}

/**
 * sets the chat's cache file by touching it
 */
function chatroom_chat_set_cache($chat_id) {
  $chat_file = chatroom_chat_get_cache_file_path($chat_id);
  if (!file_exists($chat_file)) {
    @touch($chat_file);
  }
}

/**
 * gets the chat cache file path. this function is called when loading the 
 * chatroom UI, and the vaule is stored in the browser. this allows the
 * common ajax operations to check the cache before loading up Drupal
 */
function chatroom_chat_get_cache_file_path($chat_id) {
  $cache_file = chatroom_chat_get_cache_file_name($chat_id);
  return file_directory_temp() ."/drupal_chat_cache/$cache_file";
}

/**
 * get the chat's cache file name
 */
function chatroom_chat_get_cache_file_name($chat_id) {
  if ($_SERVER['PHP_SELF'] == '/index.php') {
    $site_path = '';
  }
  else {
    $site_path = substr($_SERVER['PHP_SELF'], 1, -strlen('/index.php'));
    $site_path = str_replace(array('/', '.', ' '), array('_', '_', '-'), $site_path) .'_';
  }
  return $site_path .'chat_'. $chat_id;
}

/**
 * updates chat's cache file modified time
 */
function chatroom_chat_update_cache($chat_id, $cache_file) {
  if (@touch($cache_file)) {
    return @filemtime($cache_file);
  }
  return false;
}

/**
 * handles away status requests from a chat
 */
function chatroom_chat_set_away_status($chat_id, $status) {
  db_query("UPDATE {chatroom_online_list} SET away = %d WHERE ccid = %d AND session_id = '%s'",
           $status == 'away' ? 1 : 0, $chat_id, session_id());
  $users_js = $msgs_js = '[]';
  if ($users = chatroom_chat_get_online_list($chat_id)) {
    $users_js = chatroom_chat_get_online_list_js($users, true);
  }
  return chatroom_send_ajax_response("[$msgs_js, $users_js]");
}

/**
 * handles requests that write a message into a chat
 */
function chatroom_chat_write_msg($chat_id, $last_msg_id, $cache_file, $msg, $recipient = null, $type = null, $timezone = 0, $smileys = false) {
  $session_id = session_id();
  if (!chatroom_chat_is_registered_user($chat_id)) {
    return chatroom_send_ajax_response("[{kickUser:'$session_id'}]");
  }
  if ($type == 'away' || $type == 'back') {
    return chatroom_chat_set_away_status($chat_id, $type);
  }
  global $user;
  db_query("UPDATE {chatroom_online_list} 
            SET away = 0 
            WHERE uid = %d 
            AND ccid = %d 
            AND session_id = '%s'", 
            $user->uid, $chat_id, $session_id); 
  $result = db_query("INSERT INTO {chatroom_msg} (ccid, uid, msg_type, msg, session_id, recipient, modified) 
                      VALUES (%d, %d, '%s', '%s', '%s', '%s', UNIX_TIMESTAMP())",
                      $chat_id, $user->uid, $type, stripslashes($msg), session_id(), $recipient); 
  if ($msgs = chatroom_chat_get_latest_msgs($chat_id, $last_msg_id)) {
    $msg_js = chatroom_chat_get_latest_msgs_js($msgs, $timezone, $smileys);
  }
  else {
    $msg_js = '[]';
  }
  $cache_js = '';
  if ($result && $cache_timestamp = chatroom_chat_update_cache($chat_id, $cache_file)) {
    $cache_js = ",{cacheTimestamp:$cache_timestamp}";
  }
  return chatroom_send_ajax_response("[$msg_js, [] $cache_js]");
}

/**
 * checks if the user is registered in this chat
 */
function chatroom_chat_is_registered_user($chat_id) {
  $sql = "SELECT coid FROM {chatroom_online_list} WHERE ccid = %d AND session_id = '%s'";
  return db_num_rows(db_query($sql, $chat_id, session_id()));
}

/**
 * checks if the user is banned from the chatroom - returns false if not
 */
function chatroom_is_banned_user($crid) {
  global $user;
  static $result = null;
  if (!is_null($result)) {
    return $result;
  }
  if ($user->uid == 0) {
    $result = false;
  }
  else {
    $result = db_num_rows(db_query("SELECT crid FROM {chatroom_ban_list} WHERE crid = %d AND uid = %d", $crid, $user->uid));
  }
  return $result;
}

/**
 * handles update or insert for user when loading a chatroom
 *
 * mysql 3.23 compatability patch form pacheco - thanks!
 * http://drupal.org/node/70949
 */
function chatroom_chat_register_user($chat_id) {
  global $user;
  $session_id = session_id();
  $result = db_query("SELECT coid
                      FROM   {chatroom_online_list} 
                      WHERE  ccid = %d 
                      AND    uid = %d
                      AND    session_id = '%s'",
            $chat_id, $user->uid, $session_id);

  if (db_num_rows($result)) {
    chatroom_chat_update_online_time($chat_id, $user->uid, $session_id);
  }
  else {
    db_lock_table('chatroom_online_list');
    $result = db_query("SELECT COALESCE(MAX(guest_id) + 1, 1) 
                        FROM {chatroom_online_list}
                        WHERE  ccid = %d", 
                        $chat_id);     
    if ($result && db_num_rows($result)) {    
      $is_admin = user_access('administer chats') ? 1 : 0;
      db_query("INSERT INTO {chatroom_online_list} (ccid, uid, is_admin, session_id, guest_id, modified) 
                VALUES (%d, %d, %d, '%s', %d, UNIX_TIMESTAMP())",
                $chat_id, $user->uid, $is_admin, $session_id, db_result($result));
    }
    db_unlock_tables();
  }
}

/**
 * get block cache file
 */
function chatroom_block_get_cache_file($type) {
  $url  = str_replace('//', '/', dirname($_SERVER['PHP_SELF']) . '/chatroomread.php');
  return file_directory_temp() ."/drupal_chat_cache/{$type}_". md5($_SERVER['HTTP_HOST'] . $url);
}

/**
 * udpates a block cache file
 */
function chatroom_block_update_cache($type) {
  @touch(chatroom_block_get_cache_file($type));
}

/**
 * gets the js to update an online user list block
 */
function chatroom_block_online_list_update_js($uid) {
  chatroom_site_update_online_time($uid);
  $users = chatroom_get_site_online_list();
  $invite_js = $user_js = '{}';
  if (count($users)) {
    $users_js = array();
    foreach ($users as $ol_user) {
      if ($uid != $ol_user->uid) {
        $users_js[] = '{user:"'. $ol_user->name .'",uid:'. $ol_user->uid .'}';
      }
    }
    $user_js = '{userList:['. implode(',', $users_js) .']}';
  }
  $invites = chatroom_chat_check_for_invites($uid);
  if (count($invites)) {
    $invites_js = array();
    foreach ($invites as $invite) {
      if ($invite->created_ccid) {
        $invites_js[] = '{ccid:'. $invite->created_ccid.'",user:"'. $invite->invitee_name.'",'
                      . 'uid:'. $invite->invitee_uid .',url:"#"}';
      }
      else {
        $invites_js[] = '{user:"'. $invite->sender_name.'",uid:'. $invite->sender_uid .',url:"#"}';
      }
    }
    $invite_js = '{chatInvites:['. implode(',', $invites_js) .']}';
  }
  return "$invite_js, $user_js"; 
}

/**
 * gets the js to update an active chats block 
 */
function chatroom_block_chat_update_js($cache_file) {
  $timestamp = @filemtime($cache_file);
  $chats = chatroom_get_active_chats(0, variable_get('chatroom_block_chats', '5'));
  if ($chats) {
    $chats_js = '';
    foreach ($chats as $chat) {
      $chat_js .= '{chatName:"'. $chat->chatname . '",chatListId:"chat_'. $chat->ccid .'",';
      $chat_js .= 'ccid:'. $chat->ccid .',roomName:"'. $chat->room_name .'",crid:'. $chat->crid .'},';
    }
    return "{chatList:[$chat_js $timestamp]}";
  }
  return "{chatList:[$timestamp]}";
}

/**
 * gets the js to update an active chatrooms block 
 */
function chatroom_block_room_update_js($cache_file) {
  $timestamp = @filemtime($cache_file);
  $rooms = chatroom_get_chatroom_list(0, variable_get('chatroom_block_chatrooms', '5'));
  if ($rooms) {
    $room_js = '';
    foreach ($rooms as $room) {
      $room_js .= '{chatroomName:"'. $room->title . '",chatroomListId:"chatroom_'. $room->nid .'",';
      $room_js .= 'crid:'. $room->nid .'},';
    }
    return "{chatroomList:[$room_js $timestamp]}";
  }
  return "{chatroomList:[$timestamp]}";
}

/**
 * takes an array of online users and formats as js
 */
function chatroom_chat_get_online_list_js($users, $object = false) {
  $js_array = array();  
  foreach ($users as $ol_user) {    
    $name = $ol_user->name ? check_plain($ol_user->name) : "guest-{$ol_user->guest_id}";
    $js = '';
    $js .= '{user:"'. $name .'",sessionId:"'. $ol_user->session_id;
    $js .= '",uid:'. $ol_user->uid .',away:'. $ol_user->away .'}';    
    $js_array[] = $js;
  }  
  if ($object) {
    return '{onlineList:['. implode(',', $js_array) .']}';
  }
  return '['. implode(',', $js_array) .']';
}

/**
 * takes an array of msgs and formats as js
 */
function chatroom_chat_get_latest_msgs_js($msgs, $timezone = 0, $smileys = false) {
  $js = '';
  $i = 0;
  $msg_count = count($msgs);
  foreach ($msgs as $msg) {
    if ($smileys) {
      $msg->msg = chatroom_smileys_filter_process($msg->msg);
    }
    $name = $msg->name ? $msg->name : "guest-{$msg->guest_id}";
    $time = gmdate('G:i', $msg->modified + $timezone);
    $js .= '{id:'. $msg->cmid .',text:"'. str_replace(array("\\", '"'), array("\\\\", '\"'), $msg->msg);
    $js .= '",user:"'. $name .'",time:"'. $time .'",recipient:"'. $msg->recipient .'",'; 
    $js .= 'type:"'. $msg->msg_type .'"}'. (++$i == $msg_count ? '' : ',');
  }
  return "{msgs:[$js]}";
}

/**
 * update a users online timestamp value
 */
function chatroom_chat_update_online_time($chat_id, $uid, $session_id) {
   db_query("UPDATE {chatroom_online_list} 
             SET modified = UNIX_TIMESTAMP() 
             WHERE ccid = %d 
             AND uid = %d 
             AND session_id = '%s'",
             $chat_id, $uid, $session_id);
}

/**
 * handles requests that read info about a chat
 */
function chatroom_chat_read_msgs($chat_id, $last_msg_id, $update_count, $cache_file, $online_list = false, $timezone = 0, $smileys = false) {
  if (!chatroom_chat_is_registered_user($chat_id)) {
    return chatroom_send_ajax_response("[{kickUser:'". session_id() ."'}]");
  }
  global $user;
  $msg_js   = '[]';
  $users_js = '[]';
  chatroom_chat_update_online_time($chat_id, $user->uid, session_id());
  if ($msgs = chatroom_chat_get_latest_msgs($chat_id, $last_msg_id)) {
    $msg_js = chatroom_chat_get_latest_msgs_js($msgs, $timezone, $smileys);
  }
  if ($online_list) {
    if ($update_count == 1 || $update_count % 4 == 0) {
      if ($users = chatroom_chat_get_online_list($chat_id)) {
        $users_js = chatroom_chat_get_online_list_js($users, true);
      }
    }
  }
  $cache_timestamp = @filemtime($cache_file);
  $cache_js = '';
  if ($cache_timestamp) {
    $cache_js = ",{cacheTimestamp:$cache_timestamp}";
  }
  return chatroom_send_ajax_response("[$msg_js, $users_js $cache_js]");
}

/**
 * updates a users online time 
 */
function chatroom_site_update_online_time($uid) {
  db_query('UPDATE {users} SET access = %d WHERE uid = %d', time(), $uid);
}

/**
 * gets a list of online users, not including the current user
 */
function chatroom_get_site_online_list() {
  global $user;
  $users = array();
  $time_period = variable_get('chatroom_online_list_update_freq', 5);
  $result = db_query('SELECT uid, name FROM {users} WHERE access >= %d AND uid != 0', time() - $time_period);
  while ($ol_user = db_fetch_object($result)) {
    if ($user->uid != $ol_user->uid) {
      $users[] = $ol_user;
    }
  }
  return $users;
}

/**
 * checks for invites that have been sent to me, or that i have sent,
 * and have been accepted, so created_ccid will be not null
 */
function chatroom_chat_check_for_invites($uid) {
  global $user;
  if ($user->uid != $uid) {
    return array();
  }
  $result = db_query('SELECT    ui.name AS invitee_name,
                                us.name AS sender_name,
                                cci.*
                      FROM      {chatroom_chat_invites} AS cci 
                      LEFT JOIN {users} AS ui
                      ON        ui.uid = cci.invitee_uid
                      LEFT JOIN {users} AS us
                      ON        us.uid = cci.sender_uid
                      WHERE     (cci.sender_uid = %d AND cci.created_ccid IS NOT NULL)
                      OR        (cci.invitee_uid = %d AND cci.created_ccid IS NULL)', 
                      $uid, $uid);
  $invites = array();
  while ($invite = db_fetch_object($result)) {
    $invites[] = $invite;
  }
  return $invites;
}

/**
 * inserts an invite for a chat
 */
function chatroom_chat_insert_invite($uid, $invitee_uid) {
  // check this is a valid request
  global $user;
  if ($user->uid != $uid) {
    exit;
  }

  // insert the table row
  // send 'ok, inserted' to the browser
}

/**
 * accepts an invite for a chat
 */
function chatroom_chat_accept_invite($uid, $invitee_uid) {
  // check this is a valid request
  global $user;
  if ($user->uid != $uid) {
    exit;
  }

  // create a chat and get an id
  
  // update the invite table row
  // send 'ok, here's your chat url with user X' to the browser
}

/**
 * outputs html for list of online users for the whole site
 */
function chatroom_block_site_online_list() {
  global $user;
  $title    = t('online chatroom users');
  $users    = chatroom_get_site_online_list();
  $users_js = '';
  if (count($users)) {
    $users_js = array();
    $content = '<ul class="menu" id="chatroom-sitewide-online">';
    foreach ($users as $ol_user) {
            $content .= '<li id="user-li-'. $ol_user->uid .'"><a href="#user" id="user-'. $ol_user->uid .'">';
      $content .= check_plain($ol_user->name). '</a></li>';
      $users_js[] = '{user:"'. $ol_user->name .'",uid:'. $ol_user->uid .'}';
    }
    $users_js = implode(',', $users_js);
    $content .= '</ul>';
  }
  else {
    $content = '<p><em>'. t('There are no online users') .'</em></p>';
  }
  $invites = chatroom_chat_check_for_invites($user->uid);
  $content .= '<div id="chatroom-invites">';
  if (count($invites)) {
    foreach ($invites as $invite) {
      if ($invite->created_ccid) {
        $content .= '<p><a href="'. $invite->cciid .'" id="accepted-'. $invite->sender_uid .'">'; 
        $content .= t('User ') . check_plain($invite->sender_name) . t(' has accepted your invite to chat') .'</a></p>';
      }
      else {
        $content .= '<p><a href="'. $invite->sender_uid .'" id="invite-'. $invite->sender_uid .'">';
        $content .= t('User ') . check_plain($invite->sender_name) . t(' has invited you to a chat') .'</a></p>';
      }
    }
  }
  $content .= '</div>';
  drupal_set_html_head('<script type="text/javascript">var chatroomBlockUsers = ['. $users_js .'];</script>');
  return array($content, $title);
}

/**
 * gets a list of online users in a given chat
 */
function chatroom_chat_block_online_list() {
  if (!preg_match('/^chatrooms\/chat\/(\d+)/', $_GET['q'], $matches)) {
    return array(false, false);
  }
  $title   = '';
  $content = '';
  if ($users = chatroom_chat_get_online_list($matches[1])) {
    $content = '<ul class="menu" id="chatroom-online">';
    foreach ($users as $ol_user) {
      $name = $ol_user->name ? check_plain($ol_user->name) : "guest-{$ol_user->guest_id}";
      $content .= '<li id="'. $ol_user->session_id .'"';
      $content .= $ol_user->away ? ' class="chatroom-user-away" ' : '';
      if ($ol_user->uid) {        
        $content .= '><a href="javascript:chatroomSelectUser(\''. $ol_user->name .'\')">' . check_plain($name). '</a></li>';
      }
      else {
        $content .= ">$name</li>";
      }
    }
    $content .= '</ul>';
    $title = t('whois online in') .' <em>'. check_plain($ol_user->chatname) .'</em>';
  }
  return array($content, $title);
}

/**
 * gets a list of online users in a given chat
 * returns the current user at the top of the list
 */
function chatroom_chat_get_online_list($chat_id) {
  $result = db_query('SELECT     col.uid, 
                                 col.session_id,
                                 col.guest_id,
                                 col.away,
                                 cc.chatname,
                                 du.name
                      FROM       {chatroom_online_list} AS col
                      INNER JOIN {chatroom_chat} AS cc
                      ON         cc.ccid = col.ccid
                      LEFT JOIN  {users} AS du
                      ON         du.uid = col.uid
                      WHERE      col.ccid = %d 
                      AND        col.modified > (UNIX_TIMESTAMP() - 5)',
                      $chat_id);
  $users = array(); 
  $session_id = session_id();
  while ($row = db_fetch_object($result)) {
    if ($row->session_id == $session_id) {
      $current_user = $row;
    }
    else {
      $users[] = $row;
    }
  }
  if (isset($current_user)) {
    array_unshift($users, $current_user);
  }
  return count($users) ? $users : FALSE; 
}

/**
 * get all msgs for a given chat
 */
function chatroom_get_all_msgs($chat_id, $archive = FALSE) {
  $table = $archive ? 'chatroom_msg_archive' : 'chatroom_msg';
  $result = db_query('SELECT     cm.*,
                                 du.name,
                                 col.guest_id
                      FROM       {' . $table . '} AS cm
                      INNER JOIN {chatroom_online_list} AS col
                      ON         col.session_id = cm.session_id AND col.ccid = cm.ccid
                      LEFT JOIN  {users} AS du 
                      ON         du.uid = cm.uid
                      WHERE      cm.ccid = %d
                      ORDER BY   cm.cmid ASC',
                      $chat_id);
  $msgs = array();
  while ($msg = db_fetch_object($result)) {
    $msgs[] = $msg;
  }
  return count($msgs) ? $msgs : FALSE;
}

/**
 * the number of old messages to show when entering a chat
 */
function chatroom_chat_old_msg_count($chat_id) {
  $result = db_query('SELECT     cr.old_msg_count 
                      FROM       {chatroom} AS cr 
                      INNER JOIN {chatroom_chat} AS cc 
                      ON         cc.crid = cr.crid 
                      WHERE      cc.ccid = %d', 
                      $chat_id);
  if (db_num_rows($result)) {
    return db_result($result);
  }
  return 20;
}

/**
 * get all msg for chatroom after last message
 */
function chatroom_chat_get_latest_msgs($chat_id, $last_msg_id) {
  $session_id = session_id();
  $order_by_clause = 'ORDER BY cm.cmid ASC';
  if ($last_msg_id == 0) {
    $order_by_clause = 'ORDER BY cm.cmid DESC LIMIT '. chatroom_chat_old_msg_count($chat_id);
  }
  $result = db_query("SELECT     cm.*,
                                 du.name,
                                 col.guest_id                                 
                      FROM       {chatroom_msg} AS cm
                      INNER JOIN {chatroom_online_list} AS col
                      ON         col.session_id = cm.session_id AND col.ccid = cm.ccid
                      LEFT JOIN  {users} AS du 
                      ON         du.uid = cm.uid
                      WHERE      cm.ccid = %d
                      AND        cm.cmid > %d
                      AND        (cm.recipient = '' || cm.recipient = '%s' || cm.session_id = '%s')
                      $order_by_clause",
                      $chat_id, $last_msg_id, $session_id, $session_id);
  $msgs = array();
  while ($msg = db_fetch_object($result)) {
    $msgs[] = $msg;
  }
  return count($msgs) ? ($last_msg_id ? $msgs : array_reverse($msgs)) : FALSE;
}

/**
 * helper function to add some state information to a chat page
 */
function chatroom_chat_add_state_js($chat, $session_id, $clean_urls) {
  global $user;
  
  $users_js = '[]';
  if ($users = chatroom_chat_get_online_list($chat->ccid)) {
    $users_js = chatroom_chat_get_online_list_js($users);
  }
  $kick_url       = dirname($_SERVER['PHP_SELF']) . ($clean_urls ? '' : '?q=') . 'chatrooms/kicked/user';
  $ban_url        = dirname($_SERVER['PHP_SELF']) . ($clean_urls ? '' : '?q=') . 'chatrooms/banned/user';
  $chat_url       = ($clean_urls ? '../../' : ''   ) . 'chatroomread.php';
  $user_url       = ($clean_urls ? '../../' : '?q=') . 'user/';
  $chatroom_base  = drupal_get_path('module', 'chatroom');
  $user_base      = drupal_get_path('module', 'user');
  $cache_file     = file_directory_temp() .'/drupal_chat_cache/'. chatroom_chat_get_cache_file_name($chat->ccid);
  $smileys_base   = drupal_get_path('module', 'smileys') ? "'". drupal_get_path('module', 'smileys') ."'" : 'false';
  $smileys_marker = '------';
  $timestamp      = time() - (60 * 60);
  $online_list    = variable_get('chatroom_online_list', 0) ? 'true' : 'true';

  // timezone support
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  } 
 
  $js = <<<JS
var chatroom = {chatId         : $chat->ccid, 
                lastMsgId      : 0, 
                cacheTimestamp : $timestamp, 
                updateCount    : 0, 
                chatUrl        : '$chat_url',
                kickUrl        : '$kick_url',
                banUrl         : '$ban_url',
                userBase       : '$user_base',
                chatroomBase   : '$chatroom_base',
                smileysBase    : $smileys_base,
                smileysMarker  : '$smileys_marker',
                userUrl        : '$user_url',
                chatCacheFile  : '$cache_file',
                updateInterval : $chat->poll_freq,
                idleInterval   : $chat->idle_freq,
                userList       : $users_js,
                onlineList     : $online_list,
                userColours    : [],
                sessionId      : '$session_id',
                timezone       : $timezone                
                };
JS;
  drupal_set_html_head('<script type="text/javascript">'. $js .'</script>');
}

/**
 * helper function to add some state information to block pages 
 */
function chatroom_block_add_state_js() {
  global $user;

  // only do this once per request
  static $state_set = false;
  if ($state_set === true) {
    return;
  }
  $state_set = true;

  // need some css for the user list display when not in chatroom chat page
  if (substr($_GET['q'], 0, strlen('chatrooms/chat/')) != 'chatrooms/chat/') {
    $css_path = str_replace('//', '/', dirname($_SERVER['PHP_SELF']) . '/');
    drupal_add_link(array("rel" => "stylesheet", "type" => "text/css", 
                          "href" => $css_path . drupal_get_path('module', 'chatroom') .'/chatroom.css'));
  }

  // get some link information
  $site_base   = dirname($_SERVER['PHP_SELF']) . (variable_get('clean_url', 0) ? '' : '?q='); 
  $chat_base   = $site_base .'chatrooms/chat/';
  $room_base   = $site_base .'node/';
  $module_base = drupal_get_path('module', 'chatroom');
  $user_base   = drupal_get_path('module', 'user');
  $block_url   = str_replace('//', '/', dirname($_SERVER['PHP_SELF']) .'/chatroomread.php');

  // setup the cache file paths
  $chat_cache_file = chatroom_block_get_cache_file('chats');
  $room_cache_file = chatroom_block_get_cache_file('chatrooms');

  // setup some timing variables
  $poll_freq = variable_get('chatroom_block_poll_freq', 5000);
  $timestamp = time() - (60 * 60);
  
  // put it all together
  $js = <<<JS
var chatroomBlock = {blockUrl:'$block_url',moduleBase:'$module_base',smileysModuleBase:'$smileys_module_base',roomBase:'$room_base',
                     chatBase:'$chat_base',chatCacheFile:'$chat_cache_file',roomCacheFile:'$room_cache_file',userBase:'$user_base',
                     updateInterval:$poll_freq,chatTimestamp:$timestamp,roomTimestamp:$timestamp,uid:$user->uid,siteBase:'$site_base'};
JS;

  drupal_set_html_head('<script type="text/javascript">'. $js .'</script>');
  drupal_add_js(drupal_get_path('module', 'chatroom') .'/chatroom.block.js');
}

/**
 * loads an archived chat
 */
function chatroom_chat_archive($chat_id = false) {
  if ($chat_id === false || !($chat = chatroom_chat_get_from_id($chat_id))) {
    return drupal_not_found();
  } 
  if (chatroom_is_banned_user($chat->crid)) {
    $msg = $chat->banned_message ? $chat->banned_message : t('You have been banned from this chatroom.');
    return '<div id="chatroom-banned-msg">'. $msg .'</div>';
  }
  drupal_add_link(array("rel" => "stylesheet", "type" => "text/css", "href" => "/modules/chatroom/chatroom.css"));
  $bc = drupal_get_breadcrumb();
  $bc[] = l(check_plain($chat->chatroom_name), "node/$chat->nid");
  drupal_set_breadcrumb($bc);
  drupal_set_title(check_plain($chat->chatname));
  $html = '<p>' . t('This chat was archived on ') . format_date($chat->when_archived, 'medium') .'</p>';
  $html .= '<div id="chatroom-container-archive">';
  if ($msgs = chatroom_get_all_msgs($chat->ccid, TRUE)) {
    foreach ($msgs as $msg) {
      $name = $msg->name ? $msg->name : 'guest-'. $msg->guest_id;
      $html .= '<p><span class="chatroom-archive-user">['. format_date($msg->modified, 'custom', 'G:i') .'] ';
      $html .= $name . ': </span>'. $msg->msg .'</p>';
    }
  }
  else {
    $html .= '<p>' . t('This chat contains no messages') .'</p>';
  }
  return $html . '</div>';
}

/**
 * checks if a user is an admin for a chat
 */
function chatroom_chat_is_admin() {
  return user_access('administer chats');
}

/**
 * closes an active chat
 */
function chatroom_chat_close($chat_id) {
  if (chatroom_chat_is_admin()) {

  }
}

/**
 * tells a kicked out user not to be a knob
 */
function chatroom_chat_kicked_user($chat_id = false) {
  if (!$chat_id || !$chat = chatroom_chat_get_from_id($chat_id)) {
    return drupal_not_found();
  }
  else {
    $msg = $chat->kicked_out_message ? $chat->kicked_out_message : t('You have been kicked out of a chat for misbehaving.');
  }
  return '<div id="chatroom-kicked-msg">'. $msg .'</div>';
}

/**
 * bans a user from a chatroom
 */
function chatroom_ban_user($chat_id, $session_id, $uid, $admin_uid) {
  if (chatroom_chat_is_admin()) {
    db_query("DELETE FROM {chatroom_online_list} WHERE ccid = %d AND session_id = '%s'", $chat_id, $session_id);
    $chat = chatroom_chat_get_from_id($chat_id);
    db_query("INSERT INTO {chatroom_ban_list} (crid, uid, admin_uid) VALUES (%d, %d, %d)", $chat->crid, $uid, $admin_id);
    chatroom_send_ajax_response("[{banUser:'$session_id'}]");
  }
}

/**
 * kicks a user out of a chat
 */
function chatroom_chat_kick_user($chat_id, $session_id) {
  if (chatroom_chat_is_admin()) {
    db_query("DELETE FROM {chatroom_online_list} WHERE ccid = %d AND session_id = '%s'", $chat_id, $session_id);
    chatroom_send_ajax_response("[{kickUser:'$session_id'}]");
  }
}

/**
 * loads the UI for popout chat, and registers this user as online
 */
function chatroom_popout_chat($chat_id = false) {
  if ($chat_id === false || !($chat = chatroom_chat_get_from_id($chat_id))) {
    return drupal_not_found();
  } 
  global $user;
  $result = db_result(db_query('SELECT cciid FROM {chatroom_chat_invites} 
                                WHERE created_ccid = %d 
                                AND (invitee_uid = %d OR sender_uid = %d)',
                                $chat->ccid, $user->uid));
  if (!$result) {
    return drupal_access_denied();
  }
  chatroom_chat_register_user($chat->ccid);
  chatroom_chat_set_cache($chat->ccid);
  $clean_urls = variable_get('clean_url', 0);
  $css_path = str_replace('//', '/', dirname($_SERVER['PHP_SELF']) . '/');
  drupal_add_link(array("rel" => "stylesheet", "type" => "text/css", 
                        "href" => $css_path . drupal_get_path('module', 'chatroom') .'/chatroom.css'));
  drupal_add_js(drupal_get_path('module', 'chatroom') .'/chatroom.js');
  chatroom_chat_add_state_js($chat, session_id(), $clean_urls);

  drupal_set_title(check_plain($chat->chatname));
  $html = '<div id="chatroom-container">';
  $html .= theme('chatroom_chat_board');
  $html .= theme('chatroom_chat_textentry');
  $html .= '</div>';
  return $html;
}

/**
 * loads the UI for a chat, and registers this user as online
 */
function chatroom_chat($chat_id = false) {
  if ($chat_id === false || !($chat = chatroom_chat_get_from_id($chat_id))) {
    return drupal_not_found();
  } 
  if (chatroom_is_banned_user($chat->crid)) {
    $msg = $chat->banned_message ? $chat->banned_message : t('You have been banned from this chatroom.');
    return '<div id="chatroom-banned-msg">'. $msg .'</div>';
  }
  chatroom_chat_register_user($chat->ccid);
  chatroom_chat_set_cache($chat->ccid);
  $clean_urls = variable_get('clean_url', 0);
  $css_path = str_replace('//', '/', dirname($_SERVER['PHP_SELF']) . '/');
  drupal_add_link(array("rel" => "stylesheet", "type" => "text/css", 
                        "href" => $css_path . drupal_get_path('module', 'chatroom') .'/chatroom.css'));
  drupal_add_js(drupal_get_path('module', 'chatroom') .'/chatroom.js');
  chatroom_chat_add_state_js($chat, session_id(), $clean_urls);

  $bc = drupal_get_breadcrumb();
  $bc[] = l(check_plain($chat->chatroom_name), "node/$chat->nid");
  drupal_set_breadcrumb($bc);

  drupal_set_title(check_plain($chat->chatname));
  $html = '<div id="chatroom-container">';
  $html .= theme('chatroom_chat_board');
  $html .= theme('chatroom_chat_textentry');
  $html .= '</div>';
  return $html;
}

/**
 * chatroom module home
 */
function chatroom_home() {
  global $user;
  if ($node->type == 'chatroom') {
    $bc = drupal_get_breadcrumb();
    $bc[] = l('Chatrooms', 'chatrooms/');
    drupal_set_breadcrumb($bc);
  }
  $out = '';
  if (user_access('create chatrooms')) {
    $out .= '<ul><li>' . l(t('create a chatroom'), "node/add/chatroom") . '</li></ul>';
  }
  if ($chatrooms = chatroom_get_chatroom_list()) {
    if ($list_description = variable_get('chatroom_list_description', '')) {
      $out .= theme('chatroom_list_description', $list_description);
    }
    $header = array(t('Name'), t('Description'), t('Active chats'));
    foreach ($chatrooms as $room) {
      $rows[] = array(
        array('data' => l(check_plain($room->title), "node/$room->nid")),
        array('data' => filter_xss($room->body)),
        array('data' => $room->chat_count)
      );
    }
    $out .= theme('table', $header, $rows); 
  } 
  else {
    $out .= '<h2>' . t('There are no chatrooms'). '</h2>';
  }
  return $out;
}

/**
 * send response to ajax requests
 */
function chatroom_send_ajax_response($response) {
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
  header("Cache-Control: no-store, no-cache, must-revalidate");
  header("Cache-Control: post-check=0, pre-check=0", false);
  header("Pragma: no-cache");
  echo $response;
}

/**
 * returns a chatroom object for $chat_id
 */
function chatroom_chat_get_from_id($chat_id) {
  $result = db_query('SELECT     cc.*, 
                                 n.title AS chatroom_name,
                                 n.nid,
                                 cr.poll_freq,
                                 cr.idle_freq,
                                 cr.kicked_out_message,
                                 cr.banned_message
                      FROM       {chatroom_chat} AS cc
                      INNER JOIN {chatroom} AS cr 
                      ON         cr.crid = cc.crid
                      INNER JOIN {node} AS n 
                      ON         n.nid = cr.nid
                      WHERE      cc.ccid = %d', 
                      $chat_id);
  if ($result && db_num_rows($result)) {
    return db_fetch_object($result);
  }
  return FALSE;
}

/**
 * format a msg for display in a summary table
 */
function chatroom_get_msg_info($msg) {
  $user = $msg->uid ? l(check_plain($msg->name), "user/$msg->uid") : t('Anonymous');
  return check_plain($msg->msg) . "<br />Posted by <b>$user</b>, ". format_date($msg->modified, 'medium'); 
}

/**
 * returns a the list of chats for a given room
 * 
 * patch applied to fix archived msg count from here:
 * http://drupal.org/node/70771
 * thanks jun :-)
 *
 */
function chatroom_get_room_summary($room_id) {
  $result = db_query('SELECT     GREATEST(COUNT(cm.cmid), COUNT(cma.cmid)) AS msg_count,
                                 MAX(cm.cmid) AS last_cmid,
                                 cc.ccid,
                                 cc.chatname,
                                 cc.when_archived
                      FROM       {chatroom} AS cr
                      INNER JOIN {chatroom_chat} AS cc
                      ON         cc.crid = cr.crid
                      LEFT JOIN  {chatroom_msg} AS cm
                      ON         cm.ccid = cc.ccid
                      LEFT JOIN  {chatroom_msg_archive} AS cma
                      ON         cma.ccid = cc.ccid
                      WHERE      cr.crid =  %d
                      GROUP BY   cc.ccid', 
                      $room_id);
  $chats = array();
  $msg_ids = array();
  while ($chat = db_fetch_object($result)) {
    if ($chat->when_archived) {
      $chat->section = 'archives';
      $chat->msg_info = t('This chat was archived on ') . format_date($chat->when_archived, 'medium');
    }
    else {
      $chat->section = 'chat';
      if ($chat->last_cmid) {
        $msg_ids[] = $chat->last_cmid;
      }
      else {
        $chat->msg_info = t('No messages');
      }
    }
    $chats[$chat->ccid] = $chat;
  }
  if (count($msg_ids)) {
    $result = db_query('SELECT    cm.*, 
                                  u.name 
                        FROM      {chatroom_msg} AS cm
                        LEFT JOIN {users} AS u 
                        ON        u.uid = cm.uid 
                        WHERE     cmid IN (%s)', 
                        implode(',', $msg_ids));
    while ($msg = db_fetch_object($result)) {
      foreach ($chats as $i => $chat) {
        if ($chat->last_cmid == $msg->cmid) {
          $chats[$i]->msg_info = chatroom_get_msg_info($msg);
        }
      }
    }
  }
  return $chats;
}

/**
 * returns the list of available chatrooms
 */
function chatroom_get_chatroom_list($start = null, $end = null) {
  $sql = 'SELECT     nr.*,
                     COUNT(cc.ccid) AS chat_count
          FROM       {chatroom} AS cr
          INNER JOIN {node_revisions} AS nr
          ON         nr.nid = cr.nid
          INNER JOIN {node} AS n
          ON         n.nid = nr.nid
          LEFT JOIN  {chatroom_chat} AS cc
          ON         cc.crid = cr.crid
          WHERE      cc.when_archived IS NULL
          GROUP BY   cr.crid
          ORDER BY   n.sticky DESC, nr.timestamp DESC';
  if (is_null($start) || is_null($end)) {
    $result = db_query($sql);
  }
  else {
    $result = db_query_range($sql, $start, $end);
  }
  if ($result && db_num_rows($result)) {
    while ($room = db_fetch_object($result)) {
      $rooms[] = $room;
    }
    return $rooms;
  }
  return false;
}

/**
 * smileys module support - test if smileys module is enabled
 * can't use variable_get because we might only have session bootstrap
 */
function chatroom_smileys_enabled() {
  return unserialize(db_result(db_query("SELECT value FROM {variable} WHERE name = 'chatroom_smileys_enabled'")));
}

/**
 * smileys module support
 * test if smileys module is avaliable
 */
function chatroom_smileys_supported() {
  return function_exists('_smileys_list'); 
}

/**
 * smileys module support
 * return text entry smileys list 
 */
function chatroom_smileys_get_textentry() {
  if (chatroom_smileys_supported() && chatroom_smileys_enabled()) {
    $hidden = variable_get('chatroom_smileys_showtextentry', 0) ? '' : '-hidden';
    $content = '<div class="chatroom-textentry-smileys'. $hidden.'">';
    $list = _smileys_list();
    foreach ($list as $smiley) {
      $alt = check_plain(implode(' &nbsp; ', explode(' ', $smiley->acronyms)));
      $acronyms = explode(' ', $smiley->acronyms);
      $id = ' id="_'. md5($acronyms[0]) .'" ';
      $content .= $hidden ? '' : '<a href="javascript:chatroomSmileyInsert(\''. $acronyms[0] .'\')">';
      $content .= '<img'. $id .'src="'. check_url(base_path() . $smiley->image) .'" title="'. $alt .'" alt="'. $alt .'" />';
      $content .= $hidden ? '' : '</a>';
    }
    $content .= '</div>';
    return $content;
  }
}

/**
 * smileys module support - process smileys filtering
 * this is modified from smileys.module
 * - because we don't have full bootstrap
 * - because we don't want to send html, just data about image
 */
function chatroom_smileys_filter_process($text) {
  if (!chatroom_smileys_supported() || !chatroom_smileys_enabled()) {
    return $text;
  }
  $text = ' '. $text .' ';
  $list = _smileys_list();
  $marker = '------';
  foreach ($list as $smiley) {
    $acronyms = explode(" ", $smiley->acronyms);
    $alt = str_replace('\\', '\\\\', check_plain($smiley->description));
    foreach ($acronyms as $acronym) {
      if ($smiley->standalone) {
        $replace = "\\1{$marker}_". md5($acronyms[0]) ."$marker\\2";
        $text = eregi_replace("([ ,\.\?!:\(\)\r\n\<\>])". preg_quote($acronym) ."([ ,\.\?!:\(\)\r\n\<\>])", $replace, $text);
      }
      else {
        $replace = $marker .'_'. md5($acronyms[0]) . $marker;
        $text = eregi_replace(preg_quote($acronym), $replace, $text);
      }
    }
  }
  return substr($text, 1, -1);
}

/**
 * returns html for chatroom list description
 */
function theme_chatroom_list_description($list_description) {
  return '<div id="chatroom-list-description">'. $list_description .'</div>';
}

/**
 * returns html for the message board
 */
function theme_chatroom_chat_board() {
  return '<div id="chatroom-board"></div>';
}

/**
 * returns html for the text entry widget
 * themeable
 */
function theme_chatroom_chat_textentry() {
  $output  = '<div class="clear-both"></div>'."\n";
  $output .= '<div id="chatroom-textentry">'."\n";
  $output .= '<span class="chatroom-textentry-title">'. t('Type your message') .'</span><br/><br/>'."\n";
  $output .= '<input type="text" id="chatroom-msg-input" size="50" />'."\n";  
  $output .= '<input type="submit" id="chatroom-msg-submit" value="Send" />'."\n";
  $output .= chatroom_smileys_get_textentry();
  $output .= '<div class="chatroom-textentry-options"><label><input type="checkbox" id="chatroom-msg-away" /> set my status to "away"</label></div>'."\n";  
  $output .= '</div>'."\n";
        
  return $output;
}

/* vim: set expandtab tabstop=2 shiftwidth=2 autoindent smartindent: */
