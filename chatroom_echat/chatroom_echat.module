<?php

/**
 * Implements hook_entity_info().
 */
function chatroom_entity_info() {
  $return['chatroom'] = array(
    'label' => t('Chatroom Chat entity'),
    'controller class' => 'ChatroomController',
    'base table' => 'chatroom',
    'revision table' => 'chatroom_revision',
    'uri callback' => 'chatroom_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'nid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
     ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (chatroom_types() as $type => $info) {
    $return['chatroom']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/chatroom/manage/%chatroom_type',
        'real path' => 'admin/structure/chatroom/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer chatroom'),
      ),
    );
  }

  return $return;
}

/**
 * Entity uri callback.
 */
function chatroom_uri($chatroom) {
  return array(
    'path' => 'chatroom/' . $chatroom->nid,
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function chatroom_field_extra_fields() {
  $extra = array();

  foreach (chatroom_types() as $type) {
    $extra['chatroom'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the chatroom'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the chatroom'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_permission().
 */
function chatroom_permission() {
  return array(
    'administer chatroom' =>  array(
      'title' => t('Administer chatroom'),
    ),
    'create chatroom' =>  array(
      'title' => t('Create chatroom'),
    ),
    'update chatroom' =>  array(
      'title' => t('Update chatroom'),
    ),
    'view chatroom' =>  array(
      'title' => t('View chatroom'),
    ),
    'delete chatroom' =>  array(
      'title' => t('Delete chatroom'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function chatroom_menu() {
  $items['admin/structure/chatroom'] = array(
    'title' => 'Manage chatroom',
    'description' => 'Manage chatroom',
    'page callback' => 'chatroom_overview_types',
    'access arguments' => array('administer chatroom'),
    'file' => 'chatroom.admin.inc',
  );
  $items['admin/structure/chatroom/manage/%chatroom_type'] = array(
    'title' => 'View chatroom',
    'title callback' => 'chatroom_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'chatroom_information',
    'page arguments' => array(4),
    'access arguments' => array('administer chatroom'),
    'file' => 'chatroom.admin.inc',
  );
  $items['admin/structure/chatroom/manage/%chatroom_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['chatroom/add'] = array(
    'title' => 'Add new chatroom',
    'page callback' => 'chatroom_add_page',
    'access arguments' => array('create chatroom'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'chatroom.pages.inc',
  );
  foreach (chatroom_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['chatroom/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'chatroom_add',
      'page arguments' => array(2),
      'access arguments' => array('create chatroom'),
      'description' => $type->description,
      'file' => 'chatroom.pages.inc',
    );
  }
  $items['chatroom/%chatroom'] = array(
    'title callback' => 'chatroom_page_title',
    'title arguments' => array(1),
    'page callback' => 'chatroom_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view chatroom'),
    'type' => MENU_CALLBACK,
    'file' => 'chatroom.pages.inc',
  );
  $items['chatroom/%chatroom/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['chatroom/%chatroom/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'chatroom_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update chatroom'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'chatroom.pages.inc',
  );
  $items['chatroom/%chatroom/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chatroom_delete_confirm', 1),
    'access arguments' => array('delete chatroom'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'chatroom.pages.inc',
  );
  $items['chatroom/recent'] = array(
    'title' => 'Recently added chatroom',
    'page callback' => 'chatroom_page_list_recent',
    'access arguments' => array('view chatroom'),
    'file' => 'chatroom.pages.inc',
  );

  return $items;
}

/**
 * Sets the page title based on the specified chatroom.
 *
 * @param $chatroom
 *   The chatroom object.
 */
function chatroom_page_title($chatroom) {
  return $chatroom->title;
}

/**
 * Implements hook_forms().
 *
 * All chatroom forms share the same form handler.
 */
function chatroom_forms() {
  $forms = array();
  if ($types = chatroom_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_chatroom_form']['callback'] = 'chatroom_form';
    }
  }
  return $forms;
}

/**
 * Get a list of all chatroom types available.
 *
 * Usually this would be more full-featured.
 *
 * @return array
 *   An array of chatroom type objects. Note that the "type" key matches what
 *   was defined as the main key in hook_entity_info().
 */
function chatroom_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['chat'] = (object)array(
      'type' => 'chat',
      'name' => t('Chat'),
      'description' => t('Basic chat')
    );
  }
  return $types;
}

/**
 * Menu title callback.
 *
 * @param $type
 *   The chatroom type.
 * @return string
 *   The human-friendly name of the chatroom type.
 */
function chatroom_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 * Get an individual chatroom type definition object.
 *
 * @param $type
 *   The key of the chatroom type we want.
 * @return object
 *   The specified chatroom type.
 */
function chatroom_type_load($type) {
  $types = chatroom_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Load chatroom entities from the database.
 *
 * This function should be used whenever you need to load more than one chatroom
 * from the database. chatrooms are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $nids
 *   An array of chatroom IDs.
 * @param $conditions
 *   An array of conditions on the {chatroom} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function chatroom_load_multiple($nids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('chatroom', $nids, $conditions, $reset);
}

/**
 * Load an chatroom object from the database.
 *
 * @param $nid
 *   The chatroom ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the chatroom_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function chatroom_load($nid = NULL, $vid = NULL, $reset = FALSE) {
  $nids = (isset($nid) ? array(nnid) : array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $chatroom = chatroom_load_multiple($nids, $conditions, $reset);
  return $chatroom ? reset($chatroom) : FALSE;
}

/**
 * Save an chatroom.
 *
 * @param $chatroom
 *   The chatroom to be saved.
 * @return
 *   The saved chatroom, now with an nid if necessary.
 */
function chatroom_save($chatroom) {
  return entity_get_controller('chatroom')->save($chatroom);
}

/**
 * Returns an initialized chatroom object.
 *
 * @param $type
 *   The machine-readable type of the chatroom.
 *
 * @return
 *   An chatroom object with all default fields initialized.
 */
function chatroom_new($type = '') {
  return entity_get_controller('chatroom')->create($type);
}


/**
 * Deletes an chatroom by ID.
 *
 * @param $nid
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function chatroom_delete($nid) {
  return chatroom_delete_multiple(array($nid));
}

/**
 * Deletes multiple chatrooms by ID.
 *
 * @param $nids
 *   An array of chatroom IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function chatroom_delete_multiple($nids) {
  return entity_get_controller('chatroom')->delete($nids);
}
