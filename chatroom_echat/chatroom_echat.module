<?php

/**
 * Implements hook_entity_info().
 */
function chatroom_echat_entity_info() {
  $return['chatroom_echat'] = array(
    'label' => t('Chatroom Chat entity'),
    'controller class' => 'ChatroomEchatController',
    'base table' => 'chatroom_echat',
    'revision table' => 'chatroom_echat_revision',
    'uri callback' => 'chatroom_echat_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'nid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
     ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (chatroom_echat_types() as $type => $info) {
    $return['chatroom_echat']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/chatroom_echat/manage/%chatroom_echat_type',
        'real path' => 'admin/structure/chatroom_echat/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer chatroom_echat'),
      ),
    );
  }

  return $return;
}

/**
 * Entity uri callback.
 */
function chatroom_echat_uri($chatroom_echat) {
  return array(
    'path' => 'chatroom_echat/' . $chatroom_echat->nid,
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function chatroom_echat_field_extra_fields() {
  $extra = array();

  foreach (chatroom_echat_types() as $type) {
    $extra['chatroom_echat'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the chatroom_echat'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the chatroom_echat'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_permission().
 */
function chatroom_echat_permission() {
  return array(
    'administer chatroom_echat' =>  array(
      'title' => t('Administer chatroom_echat'),
    ),
    'create chatroom_echat' =>  array(
      'title' => t('Create chatroom_echat'),
    ),
    'update chatroom_echat' =>  array(
      'title' => t('Update chatroom_echat'),
    ),
    'view chatroom_echat' =>  array(
      'title' => t('View chatroom_echat'),
    ),
    'delete chatroom_echat' =>  array(
      'title' => t('Delete chatroom_echat'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function chatroom_echat_menu() {
  $items['admin/structure/chatroom_echat'] = array(
    'title' => 'Manage chatroom_echat',
    'description' => 'Manage chatroom_echat',
    'page callback' => 'chatroom_echat_overview_types',
    'access arguments' => array('administer chatroom_echat'),
    'file' => 'chatroom_echat.admin.inc',
  );
  $items['admin/structure/chatroom_echat/manage/%chatroom_echat_type'] = array(
    'title' => 'View chatroom_echat',
    'title callback' => 'chatroom_echat_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'chatroom_echat_information',
    'page arguments' => array(4),
    'access arguments' => array('administer chatroom_echat'),
    'file' => 'chatroom_echat.admin.inc',
  );
  $items['admin/structure/chatroom_echat/manage/%chatroom_echat_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['chatroom_echat/add'] = array(
    'title' => 'Add new chatroom_echat',
    'page callback' => 'chatroom_echat_add_page',
    'access arguments' => array('create chatroom_echat'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'chatroom_echat.pages.inc',
  );
  foreach (chatroom_echat_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['chatroom_echat/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'chatroom_echat_add',
      'page arguments' => array(2),
      'access arguments' => array('create chatroom_echat'),
      'description' => $type->description,
      'file' => 'chatroom_echat.pages.inc',
    );
  }
  $items['chatroom_echat/%chatroom_echat'] = array(
    'title callback' => 'chatroom_echat_page_title',
    'title arguments' => array(1),
    'page callback' => 'chatroom_echat_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view chatroom_echat'),
    'type' => MENU_CALLBACK,
    'file' => 'chatroom_echat.pages.inc',
  );
  $items['chatroom_echat/%chatroom_echat/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['chatroom_echat/%chatroom_echat/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'chatroom_echat_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update chatroom_echat'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'chatroom_echat.pages.inc',
  );
  $items['chatroom_echat/%chatroom_echat/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chatroom_echat_delete_confirm', 1),
    'access arguments' => array('delete chatroom_echat'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'chatroom_echat.pages.inc',
  );
  $items['chatroom_echat/recent'] = array(
    'title' => 'Recently added chatroom_echat',
    'page callback' => 'chatroom_echat_page_list_recent',
    'access arguments' => array('view chatroom_echat'),
    'file' => 'chatroom_echat.pages.inc',
  );

  return $items;
}

/**
 * Sets the page title based on the specified chatroom_echat.
 *
 * @param $chatroom_echat
 *   The chatroom_echat object.
 */
function chatroom_echat_page_title($chatroom_echat) {
  return $chatroom_echat->title;
}

/**
 * Implements hook_forms().
 *
 * All chatroom_echat forms share the same form handler.
 */
function chatroom_echat_forms() {
  $forms = array();
  if ($types = chatroom_echat_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_chatroom_echat_form']['callback'] = 'chatroom_echat_form';
    }
  }
  return $forms;
}

/**
 * Get a list of all chatroom_echat types available.
 *
 * Usually this would be more full-featured.
 *
 * @return array
 *   An array of chatroom_echat type objects. Note that the "type" key matches what
 *   was defined as the main key in hook_entity_info().
 */
function chatroom_echat_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['chat'] = (object)array(
      'type' => 'chat',
      'name' => t('Chat'),
      'description' => t('Basic chat')
    );
  }
  return $types;
}

/**
 * Menu title callback.
 *
 * @param $type
 *   The chatroom_echat type.
 * @return string
 *   The human-friendly name of the chatroom_echat type.
 */
function chatroom_echat_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 * Get an individual chatroom_echat type definition object.
 *
 * @param $type
 *   The key of the chatroom_echat type we want.
 * @return object
 *   The specified chatroom_echat type.
 */
function chatroom_echat_type_load($type) {
  $types = chatroom_echat_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Load chatroom_echat entities from the database.
 *
 * This function should be used whenever you need to load more than one chatroom_echat
 * from the database. chatroom_echats are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $nids
 *   An array of chatroom_echat IDs.
 * @param $conditions
 *   An array of conditions on the {chatroom_echat} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function chatroom_echat_load_multiple($nids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('chatroom_echat', $nids, $conditions, $reset);
}

/**
 * Load an chatroom_echat object from the database.
 *
 * @param $nid
 *   The chatroom_echat ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the chatroom_echat_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function chatroom_echat_load($nid = NULL, $vid = NULL, $reset = FALSE) {
  $nids = (isset($nid) ? array(nnid) : array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $chatroom_echat = chatroom_echat_load_multiple($nids, $conditions, $reset);
  return $chatroom_echat ? reset($chatroom_echat) : FALSE;
}

/**
 * Save an chatroom_echat.
 *
 * @param $chatroom_echat
 *   The chatroom_echat to be saved.
 * @return
 *   The saved chatroom_echat, now with an nid if necessary.
 */
function chatroom_echat_save($chatroom_echat) {
  return entity_get_controller('chatroom_echat')->save($chatroom_echat);
}

/**
 * Returns an initialized chatroom_echat object.
 *
 * @param $type
 *   The machine-readable type of the chatroom_echat.
 *
 * @return
 *   An chatroom_echat object with all default fields initialized.
 */
function chatroom_echat_new($type = '') {
  return entity_get_controller('chatroom_echat')->create($type);
}


/**
 * Deletes an chatroom_echat by ID.
 *
 * @param $nid
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function chatroom_echat_delete($nid) {
  return chatroom_echat_delete_multiple(array($nid));
}

/**
 * Deletes multiple chatroom_echats by ID.
 *
 * @param $nids
 *   An array of chatroom_echat IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function chatroom_echat_delete_multiple($nids) {
  return entity_get_controller('chatroom_echat')->delete($nids);
}
